//===----------------------------------------------------------------------===//
//  Copyright (c) 2025 Javier Cuesta
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//===----------------------------------------------------------------------===//

/// The token auth method is built-in and automatically available at `/auth/token`. It allows users to authenticate using a token, as well to create new tokens, revoke secrets by token, and more.
/// When any other auth method returns an identity, Vault core invokes the token method to create a new unique token for that identity.
/// The token store can also be used to bypass any other auth method: you can create tokens directly, as well as perform a variety of other operations on tokens such as renewal and revocation.
/// [Token concepts](https://developer.hashicorp.com/vault/docs/concepts/tokens)
/// [API](https://developer.hashicorp.com/vault/api-docs/auth/token)
module TokenAuth

amends "@openapi/Document.pkl"
import "@openapi/Reference.pkl"
import "@openapi/Schema.pkl"
import "@openapi/HTTPResponse.pkl"

import ".../VaultDataResponse.pkl"
import ".../VaultRequestBody.pkl"

/// Parameter name in the crud endpoint
local parameterRoleName = "role_name"

paths {
  ["/auth/token/create"] {
    description = "The token create path is used to create new tokens."
    parameters {
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
      new Reference {
        `$ref` = "#/components/parameters/WrapTTLHeader"
      }
    }
    post {
      summary = "The token create path is used to create new tokens."
      operationId = "token-create"
      tags {
        "auth"
      }
      requestBody {
        content {
          ["application/json"] {
            schema = new Reference {
              `$ref` = "#/components/schemas/TokenCreateRequest"
            }
          }
        }
        required = true
      }
      responses {
        ["200"] {
          description = "OK"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultAuthResponse"
              }
            }
          }
        }
        [HTTPResponse.BadRequest] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/auth/token/lookup"] {
    description = "Returns information about the given token."
    parameters {
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
    }
    post {
      summary = "Returns information about the given token."
      description = "Returns information about the given token."
      operationId = "lookup-token"
      tags {
        "auth"
        "token"
      }
      requestBody {
        content {
          ["application/json"] {
            schema = new Reference {
              `$ref` = "#/components/schemas/TokenBodyRequest"
            }
          }
        }
        required = true
      }
      responses {
        ["200"] {
          description = "OK"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/TokenLookupResponse"
              }
            }
          }
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/auth/token/lookup-self"] {
    description = "Returns information about the current client token."
    parameters {
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
    }
    post {
      summary = "Returns information about the current client token."
      description = "Returns information about the current client token."
      operationId = "lookup-token-self"
      tags {
        "auth"
        "token"
      }
      responses {
        ["200"] {
          description = "OK"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/TokenLookupResponse"
              }
            }
          }
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/auth/token/lookup-accessor"] {
    description = "Returns information about the client token from the accessor."
    parameters {
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
    }
    post {
      summary = "Returns information about the client token from the accessor."
      description = "Returns information about the client token from the accessor."
      operationId = "lookup-token-accessor"
      tags {
        "auth"
        "token"
      }
      requestBody {
        content {
          ["application/json"] {
            schema = new Reference {
              `$ref` = "#/components/schemas/AccessorBodyRequest"
            }
          }
        }
        required = true
      }
      responses {
        ["200"] {
          description = "OK"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/TokenLookupResponse"
              }
            }
          }
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/auth/token/renew"] {
    description = "This endpoint will renew the given token and prevent expiration."
    parameters {
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
      new Reference {
        `$ref` = "#/components/parameters/WrapTTLHeader"
      }
    }
    post {
      summary = "This endpoint will renew the given token and prevent expiration."
      operationId = "token-renew"
      tags {
        "auth"
      }
      requestBody {
        content {
          ["application/json"] {
            schema = new Reference {
              `$ref` = "#/components/schemas/TokenRenewRequest"
            }
          }
        }
        required = true
      }
      responses {
        ["200"] {
          description = "OK"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultAuthResponse"
              }
            }
          }
        }
        [HTTPResponse.BadRequest] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/auth/token/renew-self"] {
    description = "Renews a lease associated with the calling token. This is used to prevent the expiration of a token, and the automatic revocation of it. Token renewal is possible only if there is a lease associated with it."
    parameters {
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
      new Reference {
        `$ref` = "#/components/parameters/WrapTTLHeader"
      }
    }
    post {
      summary = "Renews a lease associated with the calling token."
      operationId = "token-renew-self"
      tags {
        "auth"
      }
      requestBody {
        content {
          ["application/json"] {
            schema = new Reference {
              `$ref` = "#/components/schemas/TokenRenewSelfRequest"
            }
          }
        }
        required = true
      }
      responses {
        ["200"] {
          description = "OK"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultAuthResponse"
              }
            }
          }
        }
        [HTTPResponse.BadRequest] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/auth/token/renew-accessor"] {
    description = "Renews a lease associated with a token using its accessor. This is used to prevent the expiration of a token, and the automatic revocation of it. Token renewal is possible only if there is a lease associated with it."
    parameters {
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
      new Reference {
        `$ref` = "#/components/parameters/WrapTTLHeader"
      }
    }
    post {
      summary = "Renews a lease associated with a token using its accessor."
      operationId = "token-renew-accessor"
      tags {
        "auth"
      }
      requestBody {
        content {
          ["application/json"] {
            schema = new Reference {
              `$ref` = "#/components/schemas/TokenRenewAccessorRequest"
            }
          }
        }
        required = true
      }
      responses {
        ["200"] {
          description = "OK"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultAuthResponse"
              }
            }
          }
        }
        [HTTPResponse.BadRequest] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/auth/token/revoke"] {
    description = "Revokes a token and all child tokens. When the token is revoked, all dynamic secrets generated with it are also revoked."
    parameters {
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
      new Reference {
        `$ref` = "#/components/parameters/WrapTTLHeader"
      }
    }
    post {
      summary = "Revokes a token and all child tokens. When the token is revoked, all dynamic secrets generated with it are also revoked."
      operationId = "token-revoke"
      tags {
        "auth"
      }
      requestBody {
        content {
          ["application/json"] {
            schema = new Reference {
              `$ref` = "#/components/schemas/TokenRevokeRequest"
            }
          }
        }
        required = true
      }
      responses {
        ["204"] {
          description = "NoContent"
        }
        [HTTPResponse.BadRequest] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/auth/token/revoke-self"] {
    description = "Revokes the token used to call it and all child tokens. When the token is revoked, all dynamic secrets generated with it are also revoked."
    parameters {
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
      new Reference {
        `$ref` = "#/components/parameters/WrapTTLHeader"
      }
    }
    post {
      summary = "Revokes the token used to call it and all child tokens. When the token is revoked, all dynamic secrets generated with it are also revoked."
      operationId = "token-revoke-self"
      tags {
        "auth"
      }
      responses {
        ["204"] {
          description = "NoContent"
        }
        [HTTPResponse.BadRequest] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/auth/token/revoke-accessor"] {
    description = "Revoke the token associated with the accessor and all the child tokens. This is meant for purposes where there is no access to token ID but there is need to revoke a token and its children."
    parameters {
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
      new Reference {
        `$ref` = "#/components/parameters/WrapTTLHeader"
      }
    }
    post {
      summary = "Revoke the token associated with the accessor and all the child tokens. This is meant for purposes where there is no access to token ID but there is need to revoke a token and its children."
      operationId = "token-revoke-accessor"
      tags {
        "auth"
      }
      requestBody {
        content {
          ["application/json"] {
            schema = new Reference {
              `$ref` = "#/components/schemas/TokenRevokeAccessorRequest"
            }
          }
        }
        required = true
      }
      responses {
        ["204"] {
          description = "NoContent"
        }
        [HTTPResponse.BadRequest] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/auth/token/revoke-orphan"] {
    description = "Revokes a token but not its child tokens. When the token is revoked, all secrets generated with it are also revoked. All child tokens are orphaned, but can be revoked sub-sequently using /auth/token/revoke/. This is a root-protected endpoint."
    parameters {
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
      new Reference {
        `$ref` = "#/components/parameters/WrapTTLHeader"
      }
    }
    post {
      summary = "Revokes a token but not its child tokens. When the token is revoked, all secrets generated with it are also revoked. All child tokens are orphaned, but can be revoked sub-sequently using /auth/token/revoke/. This is a root-protected endpoint."
      operationId = "token-revoke-orphan"
      tags {
        "auth"
      }
      requestBody {
        content {
          ["application/json"] {
            schema = new Reference {
              `$ref` = "#/components/schemas/TokenRevokeRequest"
            }
          }
        }
        required = true
      }
      responses {
        ["204"] {
          description = "NoContent"
        }
        [HTTPResponse.BadRequest] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/auth/token/roles/{\(parameterRoleName)}"] {
    description = "Fetches the named role configuration."
    parameters {
      new {
        name = parameterRoleName
        description = "The name of the approle. Example: \"my-app-role\""
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
    }
    get {
      summary = "Fetches the named role configuration."
      description = "Fetches the named role configuration."
      operationId = "read-token-role"
      tags {
        "auth"
        "token"
      }
      responses {
        ["200"] {
          description = "OK"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/TokenReadRoleResponse"
              }
            }
          }
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
    post {
      summary = "Creates (or replaces) the named role"
      description = "Creates (or replaces) the named role. Roles enforce specific behavior when creating tokens that allow token functionality that is otherwise not available or would require sudo/root privileges to access. Role parameters, when set, override any provided options to the create endpoints. The role name is also included in the token path, allowing all tokens created against a role to be revoked using the `/sys/leases/revoke-prefix` endpoint."
      operationId = "update-token-role"
      tags {
        "auth"
      }
      requestBody {
        content {
          ["application/json"] {
            schema = new Reference {
              `$ref` = "#/components/schemas/TokenUpdateRoleRequest"
            }
          }
        }
        required = true
      }
      responses {
        ["204"] {
          description = "NoContent"
        }
        [HTTPResponse.BadRequest] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
    `delete` {
      summary = "Deletes the named token role."
      description = "deletes the named token role."
      operationId = "delete-token-role"
      tags {
        "auth"
      }
      responses {
        ["204"] {
          description = "NoContent"
        }
        [HTTPResponse.BadRequest] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }
}

components {
  schemas {
    ["TokenCreateRequest"] = VaultRequestBody.createToken

    ["TokenLookupResponse"] = (VaultDataResponse) {
      properties {
        ["data"] = VaultRequestBody.tokenLookup
      }
    }

    ["TokenBodyRequest"] {
      type = "object"
      properties {
        ["token"] {
          type = "string"
        }
      }
      required {
        "token"
      }
    }

    ["AccessorBodyRequest"] {
      type = "object"
      properties {
        ["accessor"] {
          type = "string"
        }
      }
      required {
        "accessor"
      }
    }

    ["TokenUpdateRoleRequest"] = VaultRequestBody.createTokenRole

    ["TokenRenewRequest"] {
      type = "object"
      properties {
        ["token"] {
          type = "string"
          description = "Token to renew (request body)"
        }
        ["increment"] {
          type = "string"
          description = "The desired increment in seconds to the token expiration"
          format = "duration"
          default = "0"
        }
      }
      required {
        "token"
      }
    }

    ["TokenRenewSelfRequest"] {
      type = "object"
      properties {
        ["increment"] {
          type = "string"
          description = "The desired increment in seconds to the token expiration"
          format = "duration"
          default = "0"
        }
      }
    }

    ["TokenRenewAccessorRequest"] {
      type = "object"
      properties {
        ["accessor"] {
          type = "string"
          description = "Accessor associated with the token to renew."
        }
        ["increment"] {
          type = "string"
          description = "The desired increment in seconds to the token expiration"
          format = "duration"
          default = "0"
        }
      }
      required {
        "accessor"
      }
    }

    ["TokenRevokeRequest"] {
      type = "object"
      properties {
        ["token"] {
          type = "string"
          description = "Token to renew (request body)"
        }
      }
      required {
        "token"
      }
    }

    ["TokenRevokeAccessorRequest"] {
      type = "object"
      properties {
        ["accessor"] {
          type = "string"
          description = "Accessor associated with the token to renew."
        }
      }
      required {
        "accessor"
      }
    }

    ["TokenReadRoleResponse"] = (VaultDataResponse) {
      properties {
        ["data"] = VaultRequestBody.tokenRole
      }
    }
  }
}