//===----------------------------------------------------------------------===//
//  Copyright (c) 2025 Javier Cuesta
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//===----------------------------------------------------------------------===//

/// The approle auth method allows machines or apps to authenticate with Vault-defined roles.
/// This auth method is oriented to automated workflows (machines and services), and is less useful
/// for human operators. We recommend using batch tokens with the AppRole auth method.
/// https://developer.hashicorp.com/vault/api-docs/auth/approle
module AppRoleAuth

amends "@openapi/Document.pkl"
import "@openapi/PathItem.pkl"
import "@openapi/Reference.pkl"
import "@openapi/Schema.pkl"
import "@openapi/HTTPResponse.pkl"

import ".../VaultApiResponse.pkl"
import ".../VaultDataPayload.pkl"

/// Parameter name in the crud endpoint
local parameterRoleName = "role_name"
local parameterEnginePathName = "engine_path"

paths {
  ["/auth/{\(parameterEnginePathName)}/role/{\(parameterRoleName)}"] {
    description = "Creates a new role"
    parameters {
      new {
        name = parameterEnginePathName
        description = "AppRole engine path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new {
        name = parameterRoleName
        description = "The name of the approle. Example: \"my-app-role\""
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
    }
    get {
      summary = "Reads the properties of an existing AppRole."
      description = "Reads the properties of an existing AppRole."
      operationId = "auth-read-approle"
      tags {
        "auth"
      }
      responses {
        ["200"] {
          description = "OK"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/ReadAppRoleResponse"
              }
            }
          }
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
    post {
      summary = "Creates a new AppRole or updates an existing AppRole. AppRole Path defined for MyApp"
      description = "Creates a new AppRole or updates an existing AppRole. This endpoint supports both create and update capabilities."
      operationId = "auth-create-approle"
      tags {
        "auth"
      }
      requestBody {
        required = true
        content {
          ["application/json"] {
            schema = new Reference {
              `$ref` = "#/components/schemas/AuthCreateAppRoleRequest"
            }
          }
        }
      }
      responses {
        ["204"] {
          description = "OK"
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
    `delete` {
      summary = "Deletes an existing AppRole from the auth method."
      description = "Deletes an existing AppRole"
      operationId = "auth-delete-approle"
      tags {
        "auth"
      }
      responses {
        ["204"] {
          description = "OK"
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/auth/{\(parameterEnginePathName)}/role/{\(parameterRoleName)}/role-id"] {
    description = "Reads the role-id of a role"
    parameters {
      new {
        name = parameterEnginePathName
        description = "AppRole engine path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new {
        name = parameterRoleName
        description = "The name of the approle. Example: \"my-app-role\""
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
    }
    get {
      summary = "Reads the RoleID of an existing AppRole."
      description = "Reads the RoleID of an existing AppRole."
      operationId = "auth-read-role-id"
      tags {
        "auth"
      }
      responses {
        ["200"] {
          description = "OK"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/ReadAppRoleIdResponse"
              }
            }
          }
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/auth/{\(parameterEnginePathName)}/role/{\(parameterRoleName)}/secret-id"] {
    description = "Generates and issues a new SecretID on an existing AppRole"
    parameters {
      new {
        name = parameterEnginePathName
        description = "AppRole engine path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new {
        name = parameterRoleName
        description = "The name of the approle. Example: \"my-app-role\""
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
      new {
        name = "X-Vault-Wrap-TTL"
        description = "Use the X-Vault-Wrap-TTL header with any Vault API call where you want to wrap the response."
        `in` = "header"
        schema {
          type = "string"
        }
        required = false
      }
    }
    post {
      summary = "Generates and issues a new SecretID on an existing AppRole"
      description = "Creates a new AppRole or updates an existing AppRole. This endpoint supports both create and update capabilities."
      operationId = "auth-approle-secret-id"
      tags {
        "auth"
      }
      requestBody {
        required = true
        content {
          ["application/json"] {
            schema = new Reference {
              `$ref` = "#/components/schemas/AuthGenerateAppRoleSecretIdRequest"
            }
          }
        }
      }
      responses {
        [HTTPResponse.OK] {
          description = "OK"
          content {
            ["application/json"] {
              schema = new Schema {
                anyOf {
                  new Schema {
                    oneOf {
                      new Reference {
                        `$ref` = "#/components/schemas/GenerateAppRoleSecretIdResponse"
                      }
                      new Reference {
                        `$ref` = "#/components/schemas/WrapAppRoleSecretIdResponse"
                      }
                    }
                  }
                  new Schema {
                    type = "object"
                  }
                }
              }
            }
          }
        }
        [HTTPResponse.BadRequest] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/auth/{\(parameterEnginePathName)}/role/{\(parameterRoleName)}/secret-id-accessor/lookup"] {
    description = "Reads out the properties of a SecretID via the secret id accessor"
    parameters {
      new {
        name = parameterEnginePathName
        description = "AppRole engine path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new {
        name = parameterRoleName
        description = "The name of the approle. Example: \"my-app-role\""
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
    }
    post {
      summary = "Reads out the properties of a SecretID via the secret id accessor"
      description = "Reads out the properties of a SecretID via the secret id accessor"
      operationId = "auth-read-approle-secret-id-with-accessor"
      tags {
        "auth"
      }
      requestBody {
        required = true
        content {
          ["application/json"] {
            schema = new Schema {
              type = "object"
              properties {
                ["secret_id_accessor"] {
                  type = "string"
                }
              }
              required {
                "secret_id_accessor"
              }
            }
          }
        }
      }
      responses {
        ["200"] {
          description = "OK"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/ReadAppRoleSecretIdWithAccessorResponse"
              }
            }
          }
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/auth/{\(parameterEnginePathName)}/role/{\(parameterRoleName)}/secret-id-accessor/destroy"] {
    description = "Destroy an AppRole secret ID by its accessor."
    parameters {
      new {
        name = parameterEnginePathName
        description = "AppRole engine path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new {
        name = parameterRoleName
        description = "The name of the approle. Example: \"my-app-role\""
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
    }
    post {
      summary = "Destroy an AppRole secret ID by its accessor."
      description = "Destroy an AppRole secret ID by its accessor."
      operationId = "auth-destroy-approle-secret-id-with-accessor"
      tags {
        "auth"
      }
      requestBody {
        required = true
        content {
          ["application/json"] {
            schema = new Schema {
              type = "object"
              properties {
                ["secret_id_accessor"] {
                  type = "string"
                }
              }
              required {
                "secret_id_accessor"
              }
            }
          }
        }
      }
      responses {
        ["204"] {
          description = "OK"
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/auth/{\(parameterEnginePathName)}/login"] {
    description = "Issues a Vault token based on the presented credentials. `role_id` is always required; if `bind_secret_id` is enabled (the default) on the AppRole, `secret_id` is required too. Any other bound authentication values on the AppRole (such as client IP CIDR) are also evaluated."
    parameters {
      new {
        name = parameterEnginePathName
        description = "AppRole engine path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
    }
    post {
      summary = "Issues a Vault token based on the presented credentials"
      description = "Issues a Vault token based on the presented credentials. `role_id` is always required; if `bind_secret_id` is enabled (the default) on the AppRole, `secret_id` is required too. Any other bound authentication values on the AppRole (such as client IP CIDR) are also evaluated."
      operationId = "auth-approle-login"
      tags {
        "auth"
      }
      requestBody {
        required = true
        content {
          ["application/json"] {
            schema = new Schema {
              type = "object"
              properties {
                ["role_id"] {
                  type = "string"
                }
                ["secret_id"] {
                  type = "string"
                }
              }
              required {
                "role_id"
                "secret_id"
              }
            }
          }
        }
      }
      responses {
        ["200"] {
          description = "OK"
          content {
            ["application/json"] {
              schema = new Schema {
                type = "object"
                properties {
                  ["auth"] {
                    type = "object"
                    properties {
                      ["renewable"] {
                        type = "boolean"
                      }
                      ["lease_duration"] {
                        type = "integer"
                      }
                      ["token_policies"] {
                        type = "array"
                        items = new Schema {
                          type = "string"
                        }
                      }
                      ["accessor"] {
                        type = "string"
                      }
                      ["client_token"] {
                        type = "string"
                      }
                    }
                    required {
                      "renewable"
                      "lease_duration"
                      "token_policies"
                      "accessor"
                      "client_token"
                    }
                  }
                  ["lease_id"] {
                    type = "string"
                  }
                }
                required {
                  "auth"
                }
              }
            }
          }
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }
}

// OpenAPI does not support LIST requests. Wait for update of Vault's API.
// list: Path = new {
//   name = "/auth/\(basePath)/role"
//   item {
//     description = "Returns a list of the existing AppRoles in the specific approle base path"
//     list {
//       summary = "This endpoint returns a list the existing AppRoles in the method."
//       description = "List the existing AppRoles for this path"
//       operationId = "auth-\(baseOpId)-list-approle"
//       tags {
//         "auth"
//       }
//       responses {
//         ["200"] {
//           description = "OK"
//           content {
//             ["application/json"] {
//               schema = new Reference {
//                 `$ref` = "#/components/schemas/ListAppRoleResponse"
//               }
//             }
//           }
//         }
//         ["400"] {
//           description = "BadRequest"
//           content {
//             ["application/json"] {
//               schema = new Reference {
//                 `$ref` = "#/components/schemas/VaultErrorsResponse"
//               }
//             }
//           }
//         }
//       }
//     }
//   }
// }


components {
  schemas {
    ["AuthCreateAppRoleRequest"] = VaultDataPayload.createAppRole

    ["ReadAppRoleResponse"] = new VaultApiResponse {
      dataSchema = (VaultDataPayload.createAppRole) {
        properties {
          ["token_explicit_max_ttl"] {
            type = "integer"
          }
          ["token_period"] {
            type = "integer"
          }
          ["token_ttl"] {
            type = "integer"
          }
          ["token_max_ttl"] {
            type = "integer"
          }
          ["secret_id_ttl"] {
            type = "integer"
          }
        }
      }
    }

    ["ReadAppRoleIdResponse"] {
      type = "object"
      properties {
        ["request_id"] {
          type = "string"
        }
        ["data"] {
          type = "object"
          properties {
            ["role_id"] {
              type = "string"
            }
          }
          required {
            "role_id"
          }
        }
      }
      required {
        "request_id"
        "data"
      }
    }

    ["GenerateAppRoleSecretIdResponse"] {
      type = "object"
      properties {
        ["request_id"] {
          type = "string"
        }
        ["renewable"] {
          type = "boolean"
        }
        ["lease_id"] {
          type = "string"
        }
        ["lease_duration"] {
          type = "integer"
        }
        ["data"] {
          type = "object"
          properties {
            ["secret_id_accessor"] {
              type = "string"
            }
            ["secret_id"] {
              type = "string"
            }
            ["secret_id_ttl"] {
              type = "integer"
            }
            ["secret_id_num_uses"] {
              type = "integer"
            }
          }
          required {
            "secret_id_accessor"
            "secret_id"
            "secret_id_ttl"
            "secret_id_num_uses"
          }
        }
      }
      required {
        "data"
      }
    }

    ["WrapAppRoleSecretIdResponse"] {
      type = "object"
      properties {
        ["renewable"] {
          type = "boolean"
        }
        ["lease_id"] {
          type = "string"
        }
        ["lease_duration"] {
          type = "integer"
        }
        ["wrap_info"] {
          type = "object"
          properties {
            ["token"] {
              type = "string"
            }
            ["accessor"] {
              type = "string"
            }
            ["ttl"] {
              type = "integer"
              description = "wrapped ttl in seconds"
            }
            ["creation_time"] {
              type = "string"
            }
            ["creation_path"] {
              type = "string"
            }
            ["wrapped_accessor"] {
              type = "string"
            }
          }
          required {
            "token"
            "accessor"
            "ttl"
            "creation_time"
            "creation_path"
            "wrapped_accessor"
          }
        }
      }
      required {
        "wrap_info"
      }
    }

    ["ReadAppRoleSecretIdWithAccessorResponse"] {
      type = "object"
      properties {
        ["request_id"] {
          type = "string"
        }
        ["renewable"] {
          type = "boolean"
        }
        ["lease_id"] {
          type = "string"
        }
        ["lease_duration"] {
          type = "integer"
        }
        ["data"] {
          type = "object"
          properties {
            ["cidr_list"] {
              type = "array"
              items = new Schema {
                type = "string"
              }
            }
            ["creation_time"] {
              type = "string"
            }
            ["expiration_time"] {
              type = "string"
            }
            ["last_updated_time"] {
              type = "string"
            }
            ["metadata"] {
              type = "object"
              format = "kvpairs"
            }
            ["secret_id_accessor"] {
              type = "string"
            }
            ["secret_id_ttl"] {
              type = "integer"
            }
            ["secret_id_num_uses"] {
              type = "integer"
            }
            ["token_bound_cidrs"] {
              type = "array"
              items = new Schema {
                type = "string"
              }
            }
          }
          required {
            "creation_time"
            "secret_id_accessor"
            "secret_id_ttl"
            "secret_id_num_uses"
          }
        }
      }
      required {
        "data"
      }
    }

    ["AuthGenerateAppRoleSecretIdRequest"] {
      type = "object"
      properties {
        ["token_bound_cidrs"] {
          type = "array"
          description = "Comma-separated string or list of CIDR blocks; if set, specifies blocks of IP addresses which can use the auth tokens generated by this SecretID. Overrides any role-set value but must be a subset."
          items = new Schema {
            type = "string"
          }
        }
        ["cidr_list"] {
          type = "array"
          description = "Comma separated string or list of CIDR blocks enforcing secret IDs to be used from specific set of IP addresses. If secret_id_bound_cidrs is set on the role, then the list of CIDR blocks listed here should be a subset of the CIDR blocks listed on the role."
          items = new Schema {
            type = "string"
          }
        }
        ["metadata"] {
          type = "string"
          description = "Metadata to be tied to the SecretID. This should be a JSON-formatted string containing the metadata in key-value pairs. This metadata will be set on tokens issued with this SecretID, and is logged in audit logs in plaintext."
        }
        ["num_uses"] {
          type = "integer"
          description = "Number of times this SecretID can be used, after which the SecretID expires. A value of zero will allow unlimited uses. Overrides secret_id_num_uses role option when supplied. May not be higher than role's secret_id_num_uses."
        }
        ["ttl"] {
          type = "string"
          description = "Duration in seconds (3600) or an integer time unit (60m) after which this SecretID expires. A value of zero will allow the SecretID to not expire. Overrides secret_id_ttl role option when supplied. May not be longer than role's secret_id_ttl."
        }
      }
    }

    // LIST REQUEST NOT SUPPORTED BY OPENAPI
    // ["ListAppRoleResponse"] {
    //   type = "object"
    //   properties {
    //     ["data"] {
    //       type = "object"
    //       properties {
    //         ["keys"] {
    //           type = "array"
    //           description = "List of roles"
    //           items = new Schema {
    //             type = "string"
    //           }
    //         }
    //       }
    //     }
    //   }
    // }
  }
}
