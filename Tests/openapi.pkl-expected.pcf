examples {
  ["openapi.json"] {
    #"""
    {
      "openapi": "3.0.3",
      "info": {
        "title": "Vault Courier",
        "version": "0.0.1",
        "description": "API client for Hashicorp Vault and OpenBao",
        "license": {
          "name": "Apache License 2.0"
        }
      },
      "servers": [
        {
          "url": "http://127.0.0.1:8200/v1",
          "description": "Default server url"
        }
      ],
      "paths": {
        "/sys/policies/acl/{name}": {
          "description": "Read, Modify, or Delete an access control policy.",
          "post": {
            "tags": [
              "system"
            ],
            "summary": "Add a new or update an existing ACL policy.",
            "operationId": "policies-write-acl-policy",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PoliciesWriteAclPolicyRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "NoContent"
              }
            }
          },
          "parameters": [
            {
              "description": "The name of the policy. Example: \"ops\"",
              "name": "name",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            }
          ]
        },
        "/sys/mounts/{path}": {
          "description": "Mount a new backend at a new path. Example: KV2",
          "post": {
            "tags": [
              "system"
            ],
            "summary": "Enable a new secrets engine at the given path.",
            "operationId": "mounts-enable-secrets-engine",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MountsEnableSecretsEngineRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "NoContent"
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "description": "The path to mount to. Example: \"aws/east\"",
              "name": "path",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            }
          ]
        },
        "/sys/auth/{path}": {
          "description": "Enable a new credential backend with a name.",
          "get": {
            "tags": [
              "system"
            ],
            "summary": "Reads auth method.",
            "description": "This endpoints returns the configuration of the auth method at the given path. This endpoint requires sudo capability on the final path, but the same functionality can be achieved without sudo via `sys/mounts/auth/[auth-path]`.",
            "operationId": "auth-read-method",
            "responses": {
              "200": {
                "description": "OK",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ReadAuthMethodResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "post": {
            "tags": [
              "system"
            ],
            "summary": "Enables a new auth method.",
            "description": "After enabling, the auth method can be accessed and configured via the auth path specified as part of the URL. This auth path will be nested under the auth prefix.\n\nFor example, enable the \"foo\" auth method will make it accessible at `/auth/foo`.",
            "operationId": "auth-enable-method",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthEnableMethodRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "NoContent"
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "tags": [
              "system"
            ],
            "summary": "Disables the auth method at the given auth path.",
            "description": "This endpoint disables the auth method at the given auth path. This endpoint requires sudo capability in addition to any path-specific capabilities.",
            "operationId": "auth-disable-method",
            "responses": {
              "204": {
                "description": "NoContent"
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "description": "The path to mount to. Cannot be delimited. Example: \"user\"",
              "name": "path",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            }
          ]
        },
        "/sys/wrapping/unwrap": {
          "description": "Unwraps a response-wrapped token.",
          "post": {
            "tags": [
              "system"
            ],
            "operationId": "unwrap",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "token": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "OK",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AuthMethodResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            }
          ]
        },
        "/auth/token/create": {
          "description": "The token create path is used to create new tokens.",
          "post": {
            "tags": [
              "auth"
            ],
            "summary": "The token create path is used to create new tokens.",
            "operationId": "token-create",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TokenCreateRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "OK",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AuthTokenResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            },
            {
              "$ref": "#/components/parameters/WrapTTLHeader"
            }
          ]
        },
        "/auth/token/lookup": {
          "description": "Returns information about the given token.",
          "post": {
            "tags": [
              "auth",
              "token"
            ],
            "summary": "Returns information about the given token.",
            "description": "Returns information about the given token.",
            "operationId": "lookup-token",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TokenBodyRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "OK",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/TokenLookupResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            }
          ]
        },
        "/auth/token/lookup-self": {
          "description": "Returns information about the current client token.",
          "post": {
            "tags": [
              "auth",
              "token"
            ],
            "summary": "Returns information about the current client token.",
            "description": "Returns information about the current client token.",
            "operationId": "lookup-token-self",
            "responses": {
              "200": {
                "description": "OK",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/TokenLookupResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            }
          ]
        },
        "/auth/token/lookup-accessor": {
          "description": "Returns information about the client token from the accessor.",
          "post": {
            "tags": [
              "auth",
              "token"
            ],
            "summary": "Returns information about the client token from the accessor.",
            "description": "Returns information about the client token from the accessor.",
            "operationId": "lookup-token-accessor",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessorBodyRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "OK",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/TokenLookupResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            }
          ]
        },
        "/auth/token/renew": {
          "description": "This endpoint will renew the given token and prevent expiration.",
          "post": {
            "tags": [
              "auth"
            ],
            "summary": "This endpoint will renew the given token and prevent expiration.",
            "operationId": "token-renew",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TokenRenewRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "OK",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AuthTokenResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            },
            {
              "$ref": "#/components/parameters/WrapTTLHeader"
            }
          ]
        },
        "/auth/token/renew-self": {
          "description": "Renews a lease associated with the calling token. This is used to prevent the expiration of a token, and the automatic revocation of it. Token renewal is possible only if there is a lease associated with it.",
          "post": {
            "tags": [
              "auth"
            ],
            "summary": "Renews a lease associated with the calling token.",
            "operationId": "token-renew-self",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TokenRenewSelfRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "OK",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AuthTokenResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            },
            {
              "$ref": "#/components/parameters/WrapTTLHeader"
            }
          ]
        },
        "/auth/token/renew-accessor": {
          "description": "Renews a lease associated with a token using its accessor. This is used to prevent the expiration of a token, and the automatic revocation of it. Token renewal is possible only if there is a lease associated with it.",
          "post": {
            "tags": [
              "auth"
            ],
            "summary": "Renews a lease associated with a token using its accessor.",
            "operationId": "token-renew-accessor",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TokenRenewAccessorRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "OK",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AuthTokenResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            },
            {
              "$ref": "#/components/parameters/WrapTTLHeader"
            }
          ]
        },
        "/auth/token/revoke": {
          "description": "Revokes a token and all child tokens. When the token is revoked, all dynamic secrets generated with it are also revoked.",
          "post": {
            "tags": [
              "auth"
            ],
            "summary": "Revokes a token and all child tokens. When the token is revoked, all dynamic secrets generated with it are also revoked.",
            "operationId": "token-revoke",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TokenRevokeRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "NoContent"
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            },
            {
              "$ref": "#/components/parameters/WrapTTLHeader"
            }
          ]
        },
        "/auth/token/revoke-self": {
          "description": "Revokes the token used to call it and all child tokens. When the token is revoked, all dynamic secrets generated with it are also revoked.",
          "post": {
            "tags": [
              "auth"
            ],
            "summary": "Revokes the token used to call it and all child tokens. When the token is revoked, all dynamic secrets generated with it are also revoked.",
            "operationId": "token-revoke-self",
            "responses": {
              "204": {
                "description": "NoContent"
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            },
            {
              "$ref": "#/components/parameters/WrapTTLHeader"
            }
          ]
        },
        "/auth/token/revoke-accessor": {
          "description": "Revoke the token associated with the accessor and all the child tokens. This is meant for purposes where there is no access to token ID but there is need to revoke a token and its children.",
          "post": {
            "tags": [
              "auth"
            ],
            "summary": "Revoke the token associated with the accessor and all the child tokens. This is meant for purposes where there is no access to token ID but there is need to revoke a token and its children.",
            "operationId": "token-revoke-accessor",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TokenRevokeAccessorRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "NoContent"
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            },
            {
              "$ref": "#/components/parameters/WrapTTLHeader"
            }
          ]
        },
        "/auth/token/revoke-orphan": {
          "description": "Revokes a token but not its child tokens. When the token is revoked, all secrets generated with it are also revoked. All child tokens are orphaned, but can be revoked sub-sequently using /auth/token/revoke/. This is a root-protected endpoint.",
          "post": {
            "tags": [
              "auth"
            ],
            "summary": "Revokes a token but not its child tokens. When the token is revoked, all secrets generated with it are also revoked. All child tokens are orphaned, but can be revoked sub-sequently using /auth/token/revoke/. This is a root-protected endpoint.",
            "operationId": "token-revoke-orphan",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TokenRevokeRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "NoContent"
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            },
            {
              "$ref": "#/components/parameters/WrapTTLHeader"
            }
          ]
        },
        "/auth/token/roles/{role_name}": {
          "description": "Fetches the named role configuration.",
          "get": {
            "tags": [
              "auth",
              "token"
            ],
            "summary": "Fetches the named role configuration.",
            "description": "Fetches the named role configuration.",
            "operationId": "read-token-role",
            "responses": {
              "200": {
                "description": "OK",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/TokenReadRoleResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "post": {
            "tags": [
              "auth"
            ],
            "summary": "Creates (or replaces) the named role",
            "description": "Creates (or replaces) the named role. Roles enforce specific behavior when creating tokens that allow token functionality that is otherwise not available or would require sudo/root privileges to access. Role parameters, when set, override any provided options to the create endpoints. The role name is also included in the token path, allowing all tokens created against a role to be revoked using the `/sys/leases/revoke-prefix` endpoint.",
            "operationId": "update-token-role",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TokenUpdateRoleRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "NoContent"
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "tags": [
              "auth"
            ],
            "summary": "Deletes the named token role.",
            "description": "deletes the named token role.",
            "operationId": "delete-token-role",
            "responses": {
              "204": {
                "description": "NoContent"
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "description": "The name of the approle. Example: \"my-app-role\"",
              "name": "role_name",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            }
          ]
        },
        "/auth/{engine_path}/role/{role_name}": {
          "description": "Creates a new role",
          "get": {
            "tags": [
              "auth"
            ],
            "summary": "Reads the properties of an existing AppRole.",
            "description": "Reads the properties of an existing AppRole.",
            "operationId": "auth-read-approle",
            "responses": {
              "200": {
                "description": "OK",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ReadAppRoleResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "post": {
            "tags": [
              "auth"
            ],
            "summary": "Creates a new AppRole or updates an existing AppRole. AppRole Path defined for MyApp",
            "description": "Creates a new AppRole or updates an existing AppRole. This endpoint supports both create and update capabilities.",
            "operationId": "auth-create-approle",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthCreateAppRoleRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "OK"
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "tags": [
              "auth"
            ],
            "summary": "Deletes an existing AppRole from the auth method.",
            "description": "Deletes an existing AppRole",
            "operationId": "auth-delete-approle",
            "responses": {
              "204": {
                "description": "OK"
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "description": "AppRole engine path",
              "name": "engine_path",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The name of the approle. Example: \"my-app-role\"",
              "name": "role_name",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            }
          ]
        },
        "/auth/{engine_path}/role/{role_name}/role-id": {
          "description": "Reads the role-id of a role",
          "get": {
            "tags": [
              "auth"
            ],
            "summary": "Reads the RoleID of an existing AppRole.",
            "description": "Reads the RoleID of an existing AppRole.",
            "operationId": "auth-read-role-id",
            "responses": {
              "200": {
                "description": "OK",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ReadAppRoleIdResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "description": "AppRole engine path",
              "name": "engine_path",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The name of the approle. Example: \"my-app-role\"",
              "name": "role_name",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            }
          ]
        },
        "/auth/{engine_path}/role/{role_name}/secret-id": {
          "description": "Generates and issues a new SecretID on an existing AppRole",
          "post": {
            "tags": [
              "auth"
            ],
            "summary": "Generates and issues a new SecretID on an existing AppRole",
            "description": "Creates a new AppRole or updates an existing AppRole. This endpoint supports both create and update capabilities.",
            "operationId": "auth-approle-secret-id",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AuthGenerateAppRoleSecretIdRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "OK",
                "content": {
                  "application/json": {
                    "schema": {
                      "anyOf": [
                        {
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/GenerateAppRoleSecretIdResponse"
                            },
                            {
                              "$ref": "#/components/schemas/WrapAppRoleSecretIdResponse"
                            }
                          ]
                        },
                        {
                          "type": "object"
                        }
                      ]
                    }
                  }
                }
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "description": "AppRole engine path",
              "name": "engine_path",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The name of the approle. Example: \"my-app-role\"",
              "name": "role_name",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            },
            {
              "description": "Use the X-Vault-Wrap-TTL header with any Vault API call where you want to wrap the response.",
              "name": "X-Vault-Wrap-TTL",
              "in": "header",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ]
        },
        "/auth/{engine_path}/role/{role_name}/secret-id-accessor/lookup": {
          "description": "Reads out the properties of a SecretID via the secret id accessor",
          "post": {
            "tags": [
              "auth"
            ],
            "summary": "Reads out the properties of a SecretID via the secret id accessor",
            "description": "Reads out the properties of a SecretID via the secret id accessor",
            "operationId": "auth-read-approle-secret-id-with-accessor",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "secret_id_accessor": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "secret_id_accessor"
                    ]
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "OK",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ReadAppRoleSecretIdWithAccessorResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "description": "AppRole engine path",
              "name": "engine_path",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The name of the approle. Example: \"my-app-role\"",
              "name": "role_name",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            }
          ]
        },
        "/auth/{engine_path}/role/{role_name}/secret-id-accessor/destroy": {
          "description": "Destroy an AppRole secret ID by its accessor.",
          "post": {
            "tags": [
              "auth"
            ],
            "summary": "Destroy an AppRole secret ID by its accessor.",
            "description": "Destroy an AppRole secret ID by its accessor.",
            "operationId": "auth-destroy-approle-secret-id-with-accessor",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "secret_id_accessor": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "secret_id_accessor"
                    ]
                  }
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "OK"
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "description": "AppRole engine path",
              "name": "engine_path",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The name of the approle. Example: \"my-app-role\"",
              "name": "role_name",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            }
          ]
        },
        "/auth/{engine_path}/login": {
          "description": "Issues a Vault token based on the presented credentials. `role_id` is always required; if `bind_secret_id` is enabled (the default) on the AppRole, `secret_id` is required too. Any other bound authentication values on the AppRole (such as client IP CIDR) are also evaluated.",
          "post": {
            "tags": [
              "auth"
            ],
            "summary": "Issues a Vault token based on the presented credentials",
            "description": "Issues a Vault token based on the presented credentials. `role_id` is always required; if `bind_secret_id` is enabled (the default) on the AppRole, `secret_id` is required too. Any other bound authentication values on the AppRole (such as client IP CIDR) are also evaluated.",
            "operationId": "auth-approle-login",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "role_id": {
                        "type": "string"
                      },
                      "secret_id": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "role_id",
                      "secret_id"
                    ]
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "OK",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "auth": {
                          "type": "object",
                          "properties": {
                            "renewable": {
                              "type": "boolean"
                            },
                            "lease_duration": {
                              "type": "integer"
                            },
                            "token_policies": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "accessor": {
                              "type": "string"
                            },
                            "client_token": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "renewable",
                            "lease_duration",
                            "token_policies",
                            "accessor",
                            "client_token"
                          ]
                        },
                        "lease_id": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "auth"
                      ]
                    }
                  }
                }
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "description": "AppRole engine path",
              "name": "engine_path",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            }
          ]
        },
        "/{kv_path}/data/{secret_key}": {
          "description": "Server secrets endpoint",
          "get": {
            "tags": [
              "secrets"
            ],
            "summary": "Reads an existing secret",
            "description": "Reads an existing secret",
            "operationId": "read-kv-secrets",
            "responses": {
              "200": {
                "description": "OK",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "request_id": {
                          "type": "string"
                        },
                        "lease_id": {
                          "type": "string"
                        },
                        "lease_duration": {
                          "type": "integer"
                        },
                        "renewable": {
                          "type": "boolean"
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object"
                            }
                          },
                          "required": [
                            "data"
                          ]
                        },
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "created_time": {
                              "type": "string"
                            },
                            "deletion_time": {
                              "type": "string"
                            },
                            "destroyed": {
                              "type": "boolean"
                            },
                            "version": {
                              "type": "integer"
                            }
                          },
                          "required": [
                            "created_time",
                            "destroyed",
                            "version"
                          ]
                        },
                        "mount_type": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "data"
                      ]
                    }
                  }
                }
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "post": {
            "tags": [
              "secrets"
            ],
            "summary": "Writes a kv secret",
            "description": "Writes a kv secret",
            "operationId": "write-kv-secrets",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "options": {
                        "type": "object",
                        "properties": {
                          "cas": {
                            "type": "integer"
                          }
                        }
                      },
                      "data": {
                        "type": "object"
                      }
                    },
                    "required": [
                      "data"
                    ]
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "OK",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "request_id": {
                          "type": "string"
                        },
                        "renewable": {
                          "type": "boolean"
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "created_time": {
                              "type": "string"
                            },
                            "deletion_time": {
                              "type": "string"
                            },
                            "destroyed": {
                              "type": "boolean"
                            },
                            "version": {
                              "type": "integer"
                            }
                          }
                        },
                        "mount_type": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "data"
                      ]
                    }
                  }
                }
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "description": "Key-value engine path",
              "name": "kv_path",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The key path for a stored secret in this path",
              "name": "secret_key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            }
          ]
        },
        "/{engine_path}/config/{connection_name}": {
          "description": "This endpoint configures the connection string used to communicate with the desired database. In addition to the parameters listed here, each Database plugin has additional, database plugin specific, parameters for this endpoint. Please read the HTTP API for the plugin you'd wish to configure to see the full list of additional parameters.",
          "get": {
            "tags": [
              "secrets",
              "database"
            ],
            "summary": "This endpoint returns the configuration settings for a connection.",
            "description": "Read database connection configuration",
            "operationId": "read-database-configuration",
            "responses": {
              "200": {
                "description": "OK",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ReadDatabaseConfigResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "post": {
            "tags": [
              "secrets",
              "database"
            ],
            "summary": "This endpoint configures the connection string used to communicate with the desired database",
            "description": "This endpoint configures the connection string used to communicate with the desired database",
            "operationId": "configure-database",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DatabaseConfigRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "OK"
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "tags": [
              "secrets",
              "database"
            ],
            "summary": "Deletes a vault database connection",
            "description": "This endpoint deletes a connection",
            "operationId": "delete-database-connection",
            "responses": {
              "204": {
                "description": "No Content"
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "description": "Database engine path",
              "name": "engine_path",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Specifies the name for this database connection. This is specified as part of the URL.",
              "name": "connection_name",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            }
          ]
        },
        "/{engine_path}/reset/{connection_name}": {
          "description": "This endpoint closes a connection and it's underlying plugin and restarts it with the configuration stored in the barrier.",
          "post": {
            "tags": [
              "secrets",
              "database"
            ],
            "summary": "This endpoint closes a connection",
            "description": "This endpoint closes a connection and it's underlying plugin and restarts it with the configuration stored in the barrier.",
            "operationId": "database-reset",
            "responses": {
              "204": {
                "description": "OK"
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "description": "Database engine path",
              "name": "engine_path",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Specifies the name of the connection to reset",
              "name": "connection_name",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            }
          ]
        },
        "/{engine_path}/reload/{plugin_name}": {
          "description": "This endpoint performs the same operation as reset connection but for all connections that reference a specific plugin name. This can be useful to restart a specific plugin after it's been upgraded in the plugin catalog.",
          "post": {
            "tags": [
              "secrets",
              "database"
            ],
            "summary": "This endpoint performs the same operation as reset connection but for all connections that reference a specific plugin name",
            "description": "This endpoint performs the same operation as reset connection but for all connections that reference a specific plugin name. This can be useful to restart a specific plugin after it's been upgraded in the plugin catalog.",
            "operationId": "reload-database-plugin",
            "responses": {
              "204": {
                "description": "OK"
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "description": "Database engine path",
              "name": "engine_path",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Specifies the name of the plugin for which all connections should be reset.",
              "name": "plugin_name",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            }
          ]
        },
        "/{engine_path}/rotate-root/{connection_name}": {
          "description": "This endpoint is used to rotate the \"root\" user credentials stored for the database connection. This user must have permissions to update its own password.",
          "post": {
            "tags": [
              "secrets",
              "database"
            ],
            "summary": "Rotate the vaults 'root' postgres role credentials",
            "description": "the root user's password will not be accessible once rotated so it is highly recommended that you create a user for Vault to utilize rather than using the actual root user.",
            "operationId": "database-rotate-root",
            "responses": {
              "204": {
                "description": "OK"
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "description": "Database engine path",
              "name": "engine_path",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "rotate the 'root' user credentials stored for the database connection.",
              "name": "connection_name",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            }
          ]
        },
        "/{engine_path}/static-roles/{role_name}": {
          "description": "This endpoint creates or updates a static role definition. Static Roles are a 1-to-1 mapping of a Vault Role to a user in a database which are automatically rotated based on the configured 'rotation_period' or 'rotation_schedule'.",
          "get": {
            "tags": [
              "secrets",
              "database"
            ],
            "summary": "Creates or updates a static role definition",
            "description": "This endpoint queries the static role definition.",
            "operationId": "database-read-static-role",
            "responses": {
              "200": {
                "description": "OK",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ReadStaticRoleResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "post": {
            "tags": [
              "secrets",
              "database"
            ],
            "summary": "Creates or updates a static role definition",
            "description": "Vault will rotate the password when creating a static role. Vault must do this in order to know the password.",
            "operationId": "database-create-static-role",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WriteStaticRoleRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "OK"
              },
              "204": {
                "description": "No Content"
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "tags": [
              "secrets",
              "database"
            ],
            "summary": "Deletes a static role definition",
            "description": "This endpoint deletes the static role definition. The user, having been defined externally, must be cleaned up manually.",
            "operationId": "database-delete-static-role",
            "responses": {
              "204": {
                "description": "No Content"
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "description": "Database engine path",
              "name": "engine_path",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Specifies the name of the role to create. It has to be in the allowed list",
              "name": "role_name",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            }
          ]
        },
        "/{engine_path}/static-creds/{role_name}": {
          "description": "This endpoint returns the current credentials based on the named static role.",
          "get": {
            "tags": [
              "secrets",
              "database"
            ],
            "summary": "Read current credentials based on the named static role.",
            "description": "returns the current credentials based on the named static role.",
            "operationId": "database-read-static-role-credentials",
            "responses": {
              "200": {
                "description": "OK",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ReadStaticRoleCredentialsResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "description": "Database engine path",
              "name": "engine_path",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Specifies the name of the static role. It has to be in the allowed list",
              "name": "role_name",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            }
          ]
        },
        "/{engine_path}/roles/{role_name}": {
          "description": "This endpoint creates or updates a dynamic role definition.",
          "get": {
            "tags": [
              "secrets",
              "database"
            ],
            "summary": "Queries the role definition",
            "description": "This endpoint queries the role definition.",
            "operationId": "database-read-role",
            "responses": {
              "200": {
                "description": "OK",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ReadRoleResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "post": {
            "tags": [
              "secrets",
              "database"
            ],
            "summary": "Creates or updates a role definition",
            "description": "Creates or updates a dynamic role definition. This endpoint distinguishes between create and update ACL capabilities.",
            "operationId": "database-create-role",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WriteRoleRequest"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "204": {
                "description": "No Content"
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "delete": {
            "tags": [
              "secrets",
              "database"
            ],
            "summary": "Deletes a role definition",
            "description": "This endpoint deletes the dynamic role definition. The user, having been defined externally, must be cleaned up manually.",
            "operationId": "database-delete-role",
            "responses": {
              "204": {
                "description": "No Content"
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "description": "Database engine path",
              "name": "engine_path",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Specifies the name of the role to create. It has to be in the allowed list",
              "name": "role_name",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            }
          ]
        },
        "/{engine_path}/creds/{role_name}": {
          "description": "This endpoint returns the current credentials based on the named role.",
          "get": {
            "tags": [
              "secrets",
              "database"
            ],
            "summary": "Read current credentials based on the named role.",
            "description": "returns the current credentials based on the named role.",
            "operationId": "database-read-role-credentials",
            "responses": {
              "200": {
                "description": "OK",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ReadRoleCredentialsResponse"
                    }
                  }
                }
              },
              "400": {
                "description": "BadRequest",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              },
              "500": {
                "description": "Internal Server Error",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/VaultErrorsResponse"
                    }
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "description": "Database engine path",
              "name": "engine_path",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Specifies the name of the role. It has to be in the allowed list",
              "name": "role_name",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "$ref": "#/components/parameters/VaultTokenHeader"
            }
          ]
        }
      },
      "components": {
        "schemas": {
          "AuthEnableMethodRequest": {
            "type": "object",
            "properties": {
              "config": {
                "type": "object",
                "format": "map",
                "description": "Configuration for this mount, such as plugin_name."
              },
              "description": {
                "type": "string",
                "description": "User-friendly description for this credential backend."
              },
              "local": {
                "type": "boolean",
                "description": "Mark the mount as a local mount, which is not replicated and is unaffected by replication.",
                "default": false
              },
              "options": {
                "type": "object",
                "format": "kvpairs",
                "description": "The options to pass into the backend. Should be a json object with string keys and values."
              },
              "seal_wrap": {
                "type": "boolean",
                "description": "Whether to turn on seal wrapping for the mount.",
                "default": false
              },
              "type": {
                "type": "string",
                "description": "The type of the backend. Example: \"userpass\""
              }
            }
          },
          "ReadAuthMethodResponse": {
            "type": "object",
            "properties": {
              "request_id": {
                "type": "string",
                "description": "the id of the request associated with this response"
              },
              "data": {
                "type": "object",
                "properties": {
                  "accessor": {
                    "type": "string"
                  },
                  "external_entropy_access": {
                    "type": "boolean"
                  },
                  "local": {
                    "type": "boolean"
                  },
                  "config": {
                    "type": "object",
                    "format": "kvpairs",
                    "description": "Configuration for this mount, such as plugin_name."
                  },
                  "options": {
                    "type": "object",
                    "format": "kvpairs",
                    "description": "The options to pass into the backend"
                  },
                  "seal_wrap": {
                    "type": "boolean",
                    "description": "Whether to turn on seal wrapping for the mount."
                  },
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string",
                    "description": "The type of the backend. Example: \"userpass\""
                  }
                },
                "required": [
                  "type",
                  "config"
                ]
              },
              "mount_type": {
                "type": "string"
              }
            },
            "required": [
              "data"
            ]
          },
          "PoliciesWriteAclPolicyRequest": {
            "type": "object",
            "properties": {
              "policy": {
                "type": "string",
                "description": "The rules of the policy."
              }
            }
          },
          "MountsEnableSecretsEngineRequest": {
            "type": "object",
            "properties": {
              "config": {
                "type": "object",
                "format": "map",
                "description": "Configuration for this mount, such as default_lease_ttl and max_lease_ttl."
              },
              "description": {
                "type": "string",
                "description": "User-friendly description for this mount."
              },
              "external_entropy_access": {
                "type": "boolean",
                "description": "Whether to give the mount access to Vault's external entropy.",
                "default": false
              },
              "local": {
                "type": "boolean",
                "description": "Mark the mount as a local mount, which is not replicated and is unaffected by replication.",
                "default": false
              },
              "options": {
                "type": "object",
                "format": "kvpairs",
                "description": "The options to pass into the backend. Should be a json object with string keys and values."
              },
              "plugin_name": {
                "type": "string",
                "description": "Name of the plugin to mount based from the name registered in the plugin catalog."
              },
              "plugin_version": {
                "type": "string",
                "description": "The semantic version of the plugin to use, or image tag if oci_image is provided."
              },
              "seal_wrap": {
                "type": "boolean",
                "description": "Whether to turn on seal wrapping for the mount.",
                "default": false
              },
              "type": {
                "type": "string",
                "description": "The type of the backend. Example: \"passthrough\""
              }
            }
          },
          "AuthMethodResponse": {
            "type": "object",
            "properties": {
              "request_id": {
                "type": "string"
              },
              "renewable": {
                "type": "boolean"
              },
              "lease_id": {
                "type": "string"
              },
              "lease_duration": {
                "type": "integer"
              },
              "data": {
                "type": "object",
                "properties": {
                  "secret_id_accessor": {
                    "type": "string"
                  },
                  "secret_id": {
                    "type": "string"
                  },
                  "secret_id_ttl": {
                    "type": "integer"
                  },
                  "secret_id_num_uses": {
                    "type": "integer"
                  }
                },
                "required": [
                  "secret_id_accessor",
                  "secret_id",
                  "secret_id_ttl",
                  "secret_id_num_uses"
                ]
              },
              "wrap_info": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string"
                  },
                  "accessor": {
                    "type": "string"
                  },
                  "ttl": {
                    "type": "integer",
                    "description": "wrapped ttl in seconds"
                  },
                  "creation_time": {
                    "type": "string"
                  },
                  "creation_path": {
                    "type": "string"
                  },
                  "wrapped_accessor": {
                    "type": "string"
                  }
                },
                "required": [
                  "token",
                  "accessor",
                  "ttl",
                  "creation_time",
                  "creation_path",
                  "wrapped_accessor"
                ]
              }
            }
          },
          "AuthCreateAppRoleRequest": {
            "type": "object",
            "properties": {
              "token_bound_cidrs": {
                "type": "array",
                "description": "List of CIDR blocks; if set, specifies blocks of IP addresses which can authenticate successfully, and ties the resulting token to these blocks as well.",
                "items": {
                  "type": "string"
                }
              },
              "token_explicit_max_ttl": {
                "type": "string",
                "description": "If set, will encode an explicit max TTL onto the token. This is a hard cap even if `token_ttl` and `token_max_ttl` would otherwise allow a renewal."
              },
              "token_no_default_policy": {
                "type": "boolean",
                "description": "If set, the default policy will not be set on generated tokens; otherwise it will be added to the policies set in `token_policies`."
              },
              "token_num_uses": {
                "type": "integer",
                "description": "The maximum number of times a generated token may be used (within its lifetime); 0 means unlimited. If you require the token to have the ability to create child tokens, you will need to set this value to 0."
              },
              "token_period": {
                "type": "string",
                "description": "The maximum allowed period value when a periodic token is requested from this role."
              },
              "token_type": {
                "type": "string",
                "description": "The type of token that should be generated. Can be service, batch, or default to use the mount's tuned default (which unless changed will be service tokens). For token store roles, there are two additional possibilities: default-service and default-batch which specify the type to return unless the client requests a different type at generation time. For machine based authentication cases, you should use batch type tokens.",
                "enum": [
                  "batch",
                  "service",
                  "default",
                  "default-service",
                  "default-batch"
                ]
              },
              "token_ttl": {
                "type": "string",
                "description": "The incremental lifetime for generated tokens. This current value of this will be referenced at renewal time."
              },
              "token_max_ttl": {
                "type": "string",
                "description": "The maximum lifetime for generated tokens. This current value of this will be referenced at renewal time."
              },
              "token_policies": {
                "type": "array",
                "description": "List of token policies to encode onto generated tokens. Depending on the auth method, this list may be supplemented by user/group/other values.",
                "items": {
                  "type": "string"
                }
              },
              "bind_secret_id": {
                "type": "boolean",
                "description": "Require `secret_id` to be presented when logging in using this AppRole."
              },
              "secret_id_bound_cidrs": {
                "type": "array",
                "description": "Comma-separated string or list of CIDR blocks; if set, specifies blocks of IP addresses which can perform the login operation.",
                "items": {
                  "type": "string"
                }
              },
              "secret_id_num_uses": {
                "type": "integer",
                "description": "Number of times any particular SecretID can be used to fetch a token from this AppRole, after which the SecretID by default will expire. A value of zero will allow unlimited uses. However, this option may be overridden by the request's `num_uses` field when generating a SecretID."
              },
              "secret_id_ttl": {
                "type": "string",
                "description": "Duration in either an integer number of seconds (3600) or an integer time unit (60m) after which by default any SecretID expires. A value of zero will allow the SecretID to not expire. However, this option may be overridden by the request's `ttl` field when generating a SecretID."
              },
              "local_secret_ids": {
                "type": "boolean",
                "description": "If set, the secret IDs generated using this role will be cluster local. This can only be set during role creation and once set, it can't be reset later."
              }
            }
          },
          "ReadAppRoleResponse": {
            "type": "object",
            "properties": {
              "request_id": {
                "type": "string"
              },
              "lease_id": {
                "type": "string"
              },
              "renewable": {
                "type": "boolean"
              },
              "lease_duration": {
                "type": "integer"
              },
              "data": {
                "type": "object",
                "properties": {
                  "token_bound_cidrs": {
                    "type": "array",
                    "description": "List of CIDR blocks; if set, specifies blocks of IP addresses which can authenticate successfully, and ties the resulting token to these blocks as well.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "token_explicit_max_ttl": {
                    "type": "integer",
                    "description": "If set, will encode an explicit max TTL onto the token. This is a hard cap even if `token_ttl` and `token_max_ttl` would otherwise allow a renewal."
                  },
                  "token_no_default_policy": {
                    "type": "boolean",
                    "description": "If set, the default policy will not be set on generated tokens; otherwise it will be added to the policies set in `token_policies`."
                  },
                  "token_num_uses": {
                    "type": "integer",
                    "description": "The maximum number of times a generated token may be used (within its lifetime); 0 means unlimited. If you require the token to have the ability to create child tokens, you will need to set this value to 0."
                  },
                  "token_period": {
                    "type": "integer",
                    "description": "The maximum allowed period value when a periodic token is requested from this role."
                  },
                  "token_type": {
                    "type": "string",
                    "description": "The type of token that should be generated. Can be service, batch, or default to use the mount's tuned default (which unless changed will be service tokens). For token store roles, there are two additional possibilities: default-service and default-batch which specify the type to return unless the client requests a different type at generation time. For machine based authentication cases, you should use batch type tokens.",
                    "enum": [
                      "batch",
                      "service",
                      "default",
                      "default-service",
                      "default-batch"
                    ]
                  },
                  "token_ttl": {
                    "type": "integer",
                    "description": "The incremental lifetime for generated tokens. This current value of this will be referenced at renewal time."
                  },
                  "token_max_ttl": {
                    "type": "integer",
                    "description": "The maximum lifetime for generated tokens. This current value of this will be referenced at renewal time."
                  },
                  "token_policies": {
                    "type": "array",
                    "description": "List of token policies to encode onto generated tokens. Depending on the auth method, this list may be supplemented by user/group/other values.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "bind_secret_id": {
                    "type": "boolean",
                    "description": "Require `secret_id` to be presented when logging in using this AppRole."
                  },
                  "secret_id_bound_cidrs": {
                    "type": "array",
                    "description": "Comma-separated string or list of CIDR blocks; if set, specifies blocks of IP addresses which can perform the login operation.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "secret_id_num_uses": {
                    "type": "integer",
                    "description": "Number of times any particular SecretID can be used to fetch a token from this AppRole, after which the SecretID by default will expire. A value of zero will allow unlimited uses. However, this option may be overridden by the request's `num_uses` field when generating a SecretID."
                  },
                  "secret_id_ttl": {
                    "type": "integer",
                    "description": "Duration in either an integer number of seconds (3600) or an integer time unit (60m) after which by default any SecretID expires. A value of zero will allow the SecretID to not expire. However, this option may be overridden by the request's `ttl` field when generating a SecretID."
                  },
                  "local_secret_ids": {
                    "type": "boolean",
                    "description": "If set, the secret IDs generated using this role will be cluster local. This can only be set during role creation and once set, it can't be reset later."
                  }
                }
              },
              "wrap_info": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string"
                  },
                  "ttl": {
                    "type": "integer"
                  },
                  "creation_time": {
                    "type": "string"
                  },
                  "accessor": {
                    "type": "string"
                  },
                  "creation_path": {
                    "type": "string"
                  },
                  "wrapped_accessor": {
                    "type": "string"
                  }
                },
                "required": [
                  "token",
                  "accessor",
                  "ttl",
                  "creation_time",
                  "creation_path",
                  "wrapped_accessor"
                ]
              },
              "warnings": {
                "type": "array",
                "description": "A list of warnings, e.g. ignored parameters",
                "items": {
                  "type": "string"
                }
              },
              "auth": {
                "type": "object",
                "properties": {
                  "client_token": {
                    "type": "string"
                  },
                  "accessor": {
                    "type": "string"
                  },
                  "token_policies": {
                    "type": "array",
                    "description": "A list of policies for the token. This must be a subset of the policies belonging to the token making the request, unless the calling token is root or contains sudo capabilities to auth/token/create. If not specified, defaults to all the policies of the calling token.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "metadata": {
                    "type": "object",
                    "format": "kvpairs",
                    "description": "Arbitrary key=value metadata to associate with the token",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "lease_duration": {
                    "type": "integer"
                  },
                  "renewable": {
                    "type": "boolean"
                  },
                  "entity_id": {
                    "type": "string"
                  },
                  "token_type": {
                    "type": "string",
                    "enum": [
                      "batch",
                      "service",
                      "default",
                      "default-service",
                      "default-batch"
                    ]
                  },
                  "orphan": {
                    "type": "boolean"
                  },
                  "mfa_requirement": {
                    "type": "boolean"
                  },
                  "num_uses": {
                    "type": "integer"
                  }
                },
                "required": [
                  "client_token",
                  "accessor",
                  "token_policies",
                  "lease_duration",
                  "token_type",
                  "orphan",
                  "num_uses",
                  "renewable"
                ]
              },
              "mount_type": {
                "type": "string"
              }
            },
            "required": [
              "request_id",
              "data"
            ]
          },
          "ReadAppRoleIdResponse": {
            "type": "object",
            "properties": {
              "renewable": {
                "type": "boolean"
              },
              "lease_id": {
                "type": "string"
              },
              "lease_duration": {
                "type": "integer"
              },
              "data": {
                "type": "object",
                "properties": {
                  "role_id": {
                    "type": "string"
                  }
                },
                "required": [
                  "role_id"
                ]
              }
            },
            "required": [
              "data"
            ]
          },
          "GenerateAppRoleSecretIdResponse": {
            "type": "object",
            "properties": {
              "request_id": {
                "type": "string"
              },
              "renewable": {
                "type": "boolean"
              },
              "lease_id": {
                "type": "string"
              },
              "lease_duration": {
                "type": "integer"
              },
              "data": {
                "type": "object",
                "properties": {
                  "secret_id_accessor": {
                    "type": "string"
                  },
                  "secret_id": {
                    "type": "string"
                  },
                  "secret_id_ttl": {
                    "type": "integer"
                  },
                  "secret_id_num_uses": {
                    "type": "integer"
                  }
                },
                "required": [
                  "secret_id_accessor",
                  "secret_id",
                  "secret_id_ttl",
                  "secret_id_num_uses"
                ]
              }
            },
            "required": [
              "data"
            ]
          },
          "WrapAppRoleSecretIdResponse": {
            "type": "object",
            "properties": {
              "renewable": {
                "type": "boolean"
              },
              "lease_id": {
                "type": "string"
              },
              "lease_duration": {
                "type": "integer"
              },
              "wrap_info": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string"
                  },
                  "accessor": {
                    "type": "string"
                  },
                  "ttl": {
                    "type": "integer",
                    "description": "wrapped ttl in seconds"
                  },
                  "creation_time": {
                    "type": "string"
                  },
                  "creation_path": {
                    "type": "string"
                  },
                  "wrapped_accessor": {
                    "type": "string"
                  }
                },
                "required": [
                  "token",
                  "accessor",
                  "ttl",
                  "creation_time",
                  "creation_path",
                  "wrapped_accessor"
                ]
              }
            },
            "required": [
              "wrap_info"
            ]
          },
          "ReadAppRoleSecretIdWithAccessorResponse": {
            "type": "object",
            "properties": {
              "request_id": {
                "type": "string"
              },
              "renewable": {
                "type": "boolean"
              },
              "lease_id": {
                "type": "string"
              },
              "lease_duration": {
                "type": "integer"
              },
              "data": {
                "type": "object",
                "properties": {
                  "cidr_list": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "creation_time": {
                    "type": "string"
                  },
                  "expiration_time": {
                    "type": "string"
                  },
                  "last_updated_time": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object",
                    "format": "kvpairs"
                  },
                  "secret_id_accessor": {
                    "type": "string"
                  },
                  "secret_id_ttl": {
                    "type": "integer"
                  },
                  "secret_id_num_uses": {
                    "type": "integer"
                  },
                  "token_bound_cidrs": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "creation_time",
                  "secret_id_accessor",
                  "secret_id_ttl",
                  "secret_id_num_uses"
                ]
              }
            },
            "required": [
              "data"
            ]
          },
          "AuthGenerateAppRoleSecretIdRequest": {
            "type": "object",
            "properties": {
              "token_bound_cidrs": {
                "type": "array",
                "description": "Comma-separated string or list of CIDR blocks; if set, specifies blocks of IP addresses which can use the auth tokens generated by this SecretID. Overrides any role-set value but must be a subset.",
                "items": {
                  "type": "string"
                }
              },
              "cidr_list": {
                "type": "array",
                "description": "Comma separated string or list of CIDR blocks enforcing secret IDs to be used from specific set of IP addresses. If secret_id_bound_cidrs is set on the role, then the list of CIDR blocks listed here should be a subset of the CIDR blocks listed on the role.",
                "items": {
                  "type": "string"
                }
              },
              "metadata": {
                "type": "string",
                "description": "Metadata to be tied to the SecretID. This should be a JSON-formatted string containing the metadata in key-value pairs. This metadata will be set on tokens issued with this SecretID, and is logged in audit logs in plaintext."
              },
              "num_uses": {
                "type": "integer",
                "description": "Number of times this SecretID can be used, after which the SecretID expires. A value of zero will allow unlimited uses. Overrides secret_id_num_uses role option when supplied. May not be higher than role's secret_id_num_uses."
              },
              "ttl": {
                "type": "string",
                "description": "Duration in seconds (3600) or an integer time unit (60m) after which this SecretID expires. A value of zero will allow the SecretID to not expire. Overrides secret_id_ttl role option when supplied. May not be longer than role's secret_id_ttl."
              }
            }
          },
          "TokenCreateRequest": {
            "type": "object",
            "properties": {
              "display_name": {
                "type": "string",
                "description": "Name to associate with this token"
              },
              "entity_alias": {
                "type": "string",
                "description": "Name of the entity alias to associate with this token"
              },
              "explicit_max_ttl": {
                "type": "string",
                "description": "Explicit Max TTL of this token"
              },
              "id": {
                "type": "string",
                "description": "Value for the token"
              },
              "meta": {
                "type": "object",
                "format": "kvpairs",
                "description": "Arbitrary key=value metadata to associate with the token"
              },
              "no_default_policy": {
                "type": "boolean",
                "description": "Do not include default policy for this token"
              },
              "no_parent": {
                "type": "boolean",
                "description": "Create the token with no parent"
              },
              "num_uses": {
                "type": "integer",
                "description": "Max number of uses for this token"
              },
              "period": {
                "type": "string",
                "description": "Renew period"
              },
              "policies": {
                "type": "array",
                "description": "A list of policies for the token. This must be a subset of the policies belonging to the token making the request, unless the calling token is root or contains sudo capabilities to auth/token/create. If not specified, defaults to all the policies of the calling token.",
                "items": {
                  "type": "string"
                }
              },
              "renewable": {
                "type": "boolean",
                "description": "Allow token to be renewed past its initial TTL up to system/mount maximum TTL",
                "default": true
              },
              "ttl": {
                "type": "string",
                "description": "Time to live for this token"
              },
              "type": {
                "type": "string",
                "description": "Token type",
                "enum": [
                  "batch",
                  "service",
                  "default",
                  "default-service",
                  "default-batch"
                ]
              }
            }
          },
          "AuthTokenResponse": {
            "type": "object",
            "properties": {
              "request_id": {
                "type": "string"
              },
              "lease_id": {
                "type": "string"
              },
              "renewable": {
                "type": "boolean"
              },
              "lease_duration": {
                "type": "integer"
              },
              "data": {
                "type": "object"
              },
              "wrap_info": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string"
                  },
                  "ttl": {
                    "type": "integer"
                  },
                  "creation_time": {
                    "type": "string"
                  },
                  "accessor": {
                    "type": "string"
                  },
                  "creation_path": {
                    "type": "string"
                  },
                  "wrapped_accessor": {
                    "type": "string"
                  }
                },
                "required": [
                  "token",
                  "accessor",
                  "ttl",
                  "creation_time",
                  "creation_path",
                  "wrapped_accessor"
                ]
              },
              "warnings": {
                "type": "array",
                "description": "A list of warnings, e.g. ignored parameters",
                "items": {
                  "type": "string"
                }
              },
              "auth": {
                "type": "object",
                "properties": {
                  "client_token": {
                    "type": "string"
                  },
                  "accessor": {
                    "type": "string"
                  },
                  "token_policies": {
                    "type": "array",
                    "description": "A list of policies for the token. This must be a subset of the policies belonging to the token making the request, unless the calling token is root or contains sudo capabilities to auth/token/create. If not specified, defaults to all the policies of the calling token.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "metadata": {
                    "type": "object",
                    "format": "kvpairs",
                    "description": "Arbitrary key=value metadata to associate with the token",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "lease_duration": {
                    "type": "integer"
                  },
                  "renewable": {
                    "type": "boolean"
                  },
                  "entity_id": {
                    "type": "string"
                  },
                  "token_type": {
                    "type": "string",
                    "enum": [
                      "batch",
                      "service",
                      "default",
                      "default-service",
                      "default-batch"
                    ]
                  },
                  "orphan": {
                    "type": "boolean"
                  },
                  "mfa_requirement": {
                    "type": "boolean"
                  },
                  "num_uses": {
                    "type": "integer"
                  }
                },
                "required": [
                  "client_token",
                  "accessor",
                  "token_policies",
                  "lease_duration",
                  "token_type",
                  "orphan",
                  "num_uses",
                  "renewable"
                ]
              },
              "mount_type": {
                "type": "string"
              }
            },
            "required": [
              "request_id",
              "auth"
            ]
          },
          "TokenLookupResponse": {
            "type": "object",
            "properties": {
              "request_id": {
                "type": "string"
              },
              "lease_id": {
                "type": "string"
              },
              "renewable": {
                "type": "boolean"
              },
              "lease_duration": {
                "type": "integer"
              },
              "data": {
                "type": "object",
                "properties": {
                  "accessor": {
                    "type": "string"
                  },
                  "creation_time": {
                    "type": "integer"
                  },
                  "creation_ttl": {
                    "type": "integer"
                  },
                  "display_name": {
                    "type": "string",
                    "description": "Name to associate with this token"
                  },
                  "entity_id": {
                    "type": "string",
                    "description": "Name of the entity id to associate with this token"
                  },
                  "expire_time": {
                    "type": "string",
                    "description": "Optional expire time date in string format."
                  },
                  "explicit_max_ttl": {
                    "type": "integer"
                  },
                  "id": {
                    "type": "string",
                    "description": "Value for the token"
                  },
                  "issue_time": {
                    "type": "string",
                    "description": "Value for the token"
                  },
                  "meta": {
                    "type": "object",
                    "format": "kvpairs",
                    "description": "Arbitrary key=value metadata to associate with the token",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "num_uses": {
                    "type": "integer",
                    "description": "Max number of uses for this token"
                  },
                  "orphan": {
                    "type": "boolean"
                  },
                  "path": {
                    "type": "string"
                  },
                  "policies": {
                    "type": "array",
                    "description": "A list of policies for the token.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "renewable": {
                    "type": "boolean",
                    "description": "Allow token to be renewed past its initial TTL up to system/mount maximum TTL"
                  },
                  "ttl": {
                    "type": "integer",
                    "description": "Time to live for this token"
                  },
                  "type": {
                    "type": "string",
                    "description": "Token type",
                    "enum": [
                      "batch",
                      "service",
                      "default",
                      "default-service",
                      "default-batch"
                    ]
                  }
                },
                "required": [
                  "accessor",
                  "creation_time",
                  "creation_ttl",
                  "display_name",
                  "entity_id",
                  "id",
                  "issue_time",
                  "num_uses",
                  "orphan",
                  "path",
                  "policies",
                  "renewable",
                  "ttl",
                  "type"
                ]
              },
              "wrap_info": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string"
                  },
                  "ttl": {
                    "type": "integer"
                  },
                  "creation_time": {
                    "type": "string"
                  },
                  "accessor": {
                    "type": "string"
                  },
                  "creation_path": {
                    "type": "string"
                  },
                  "wrapped_accessor": {
                    "type": "string"
                  }
                },
                "required": [
                  "token",
                  "accessor",
                  "ttl",
                  "creation_time",
                  "creation_path",
                  "wrapped_accessor"
                ]
              },
              "warnings": {
                "type": "array",
                "description": "A list of warnings, e.g. ignored parameters",
                "items": {
                  "type": "string"
                }
              },
              "auth": {
                "type": "object",
                "properties": {
                  "client_token": {
                    "type": "string"
                  },
                  "accessor": {
                    "type": "string"
                  },
                  "token_policies": {
                    "type": "array",
                    "description": "A list of policies for the token. This must be a subset of the policies belonging to the token making the request, unless the calling token is root or contains sudo capabilities to auth/token/create. If not specified, defaults to all the policies of the calling token.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "metadata": {
                    "type": "object",
                    "format": "kvpairs",
                    "description": "Arbitrary key=value metadata to associate with the token",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "lease_duration": {
                    "type": "integer"
                  },
                  "renewable": {
                    "type": "boolean"
                  },
                  "entity_id": {
                    "type": "string"
                  },
                  "token_type": {
                    "type": "string",
                    "enum": [
                      "batch",
                      "service",
                      "default",
                      "default-service",
                      "default-batch"
                    ]
                  },
                  "orphan": {
                    "type": "boolean"
                  },
                  "mfa_requirement": {
                    "type": "boolean"
                  },
                  "num_uses": {
                    "type": "integer"
                  }
                },
                "required": [
                  "client_token",
                  "accessor",
                  "token_policies",
                  "lease_duration",
                  "token_type",
                  "orphan",
                  "num_uses",
                  "renewable"
                ]
              },
              "mount_type": {
                "type": "string"
              }
            },
            "required": [
              "request_id",
              "data"
            ]
          },
          "TokenBodyRequest": {
            "type": "object",
            "properties": {
              "token": {
                "type": "string"
              }
            },
            "required": [
              "token"
            ]
          },
          "AccessorBodyRequest": {
            "type": "object",
            "properties": {
              "accessor": {
                "type": "string"
              }
            },
            "required": [
              "accessor"
            ]
          },
          "TokenUpdateRoleRequest": {
            "type": "object",
            "properties": {
              "allowed_policies": {
                "type": "array",
                "description": "If set, tokens can be created with any subset of the policies in this list, rather than the normal semantics of tokens being a subset of the calling token's policies. The parameter is a comma-delimited string of policy names. If at creation time no_default_policy is not set and \"default\" is not contained in disallowed_policies or glob matched in disallowed_policies_glob, the \"default\" policy will be added to the created token automatically.",
                "items": {
                  "type": "string"
                }
              },
              "disallowed_policies": {
                "type": "array",
                "description": "If set, successful token creation via this role will require that no policies in the given list are requested. The parameter is a comma-delimited string of policy names. Adding \"default\" to this list will prevent \"default\" from being added automatically to created tokens.",
                "items": {
                  "type": "string"
                }
              },
              "allowed_policies_glob": {
                "type": "array",
                "description": "If set, tokens can be created with any subset of glob matched policies in this list, rather than the normal semantics of tokens being a subset of the calling token's policies. The parameter is a comma-delimited string of policy name globs. If at creation time no_default_policy is not set and \"default\" is not contained in disallowed_policies or glob matched in disallowed_policies_glob, the \"default\" policy will be added to the created token automatically. If combined with allowed_policies policies need to only match one of the two lists to be permitted. Note that unlike allowed_policies the policies listed in allowed_policies_glob will not be added to the token when no policies are specified in the call to /auth/token/create/:role_name.",
                "items": {
                  "type": "string"
                }
              },
              "disallowed_policies_glob": {
                "type": "array",
                "description": "If set, successful token creation via this role will require that no requested policies glob match any of policies in this list. The parameter is a comma-delimited string of policy name globs. Adding any glob that matches \"default\" to this list will prevent \"default\" from being added automatically to created tokens. If combined with disallowed_policies policies need to only match one of the two lists to be blocked.",
                "items": {
                  "type": "string"
                }
              },
              "orphan": {
                "type": "boolean",
                "description": "If true, tokens created against this policy will be orphan tokens (they will have no parent). As such, they will not be automatically revoked by the revocation of any other token."
              },
              "renewable": {
                "type": "boolean",
                "description": "Set to false to disable the ability of the token to be renewed past its initial TTL. Setting the value to true will allow the token to be renewable up to the system/mount maximum TTL."
              },
              "path_suffix": {
                "type": "string",
                "description": " If set, tokens created against this role will have the given suffix as part of their path in addition to the role name. This can be useful in certain scenarios, such as keeping the same role name in the future but revoking all tokens created against it before some point in time. The suffix can be changed, allowing new callers to have the new suffix as part of their path, and then tokens with the old suffix can be revoked via /sys/leases/revoke-prefix."
              },
              "allowed_entity_aliases": {
                "type": "array",
                "description": "String or JSON list of allowed entity aliases. If set, specifies the entity aliases which are allowed to be used during token generation. This field supports globbing. Note that allowed_entity_aliases is not case sensitive.",
                "items": {
                  "type": "string"
                }
              },
              "token_bound_cidrs": {
                "type": "array",
                "description": "List of CIDR blocks; if set, specifies blocks of IP addresses which can authenticate successfully, and ties the resulting token to these blocks as well.",
                "items": {
                  "type": "string"
                }
              },
              "token_explicit_max_ttl": {
                "type": "string",
                "description": "If set, will encode an explicit max TTL onto the token. This is a hard cap even if token_ttl and token_max_ttl would otherwise allow a renewal."
              },
              "token_no_default_policy": {
                "type": "boolean",
                "description": "If set, the default policy will not be set on generated tokens; otherwise it will be added to the policies set in token_policies."
              },
              "token_num_uses": {
                "type": "integer",
                "description": "The maximum number of times a generated token may be used (within its lifetime); 0 means unlimited. If you require the token to have the ability to create child tokens, you will need to set this value to 0."
              },
              "token_period": {
                "type": "string",
                "description": "The maximum allowed period value when a periodic token is requested from this role."
              },
              "token_type": {
                "type": "string",
                "description": "The type of token that should be generated. Can be service, batch, or default to use the mount's tuned default (which unless changed will be service tokens). For token store roles, there are two additional possibilities: default-service and default-batch which specify the type to return unless the client requests a different type at generation time. For machine based authentication cases, you should use batch type tokens.",
                "enum": [
                  "batch",
                  "service",
                  "default",
                  "default-service",
                  "default-batch"
                ]
              }
            }
          },
          "TokenRenewRequest": {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "description": "Token to renew (request body)"
              },
              "increment": {
                "type": "string",
                "format": "duration",
                "description": "The desired increment in seconds to the token expiration",
                "default": "0"
              }
            },
            "required": [
              "token"
            ]
          },
          "TokenRenewSelfRequest": {
            "type": "object",
            "properties": {
              "increment": {
                "type": "string",
                "format": "duration",
                "description": "The desired increment in seconds to the token expiration",
                "default": "0"
              }
            }
          },
          "TokenRenewAccessorRequest": {
            "type": "object",
            "properties": {
              "accessor": {
                "type": "string",
                "description": "Accessor associated with the token to renew."
              },
              "increment": {
                "type": "string",
                "format": "duration",
                "description": "The desired increment in seconds to the token expiration",
                "default": "0"
              }
            },
            "required": [
              "accessor"
            ]
          },
          "TokenRevokeRequest": {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "description": "Token to renew (request body)"
              }
            },
            "required": [
              "token"
            ]
          },
          "TokenRevokeAccessorRequest": {
            "type": "object",
            "properties": {
              "accessor": {
                "type": "string",
                "description": "Accessor associated with the token to renew."
              }
            },
            "required": [
              "accessor"
            ]
          },
          "TokenReadRoleResponse": {
            "type": "object",
            "properties": {
              "request_id": {
                "type": "string"
              },
              "lease_id": {
                "type": "string"
              },
              "renewable": {
                "type": "boolean"
              },
              "lease_duration": {
                "type": "integer"
              },
              "data": {
                "type": "object",
                "properties": {
                  "allowed_policies": {
                    "type": "array",
                    "description": "If set, tokens can be created with any subset of the policies in this list, rather than the normal semantics of tokens being a subset of the calling token's policies. The parameter is a comma-delimited string of policy names. If at creation time no_default_policy is not set and \"default\" is not contained in disallowed_policies or glob matched in disallowed_policies_glob, the \"default\" policy will be added to the created token automatically.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "disallowed_policies": {
                    "type": "array",
                    "description": "If set, successful token creation via this role will require that no policies in the given list are requested. The parameter is a comma-delimited string of policy names. Adding \"default\" to this list will prevent \"default\" from being added automatically to created tokens.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "allowed_policies_glob": {
                    "type": "array",
                    "description": "If set, tokens can be created with any subset of glob matched policies in this list, rather than the normal semantics of tokens being a subset of the calling token's policies. The parameter is a comma-delimited string of policy name globs. If at creation time no_default_policy is not set and \"default\" is not contained in disallowed_policies or glob matched in disallowed_policies_glob, the \"default\" policy will be added to the created token automatically. If combined with allowed_policies policies need to only match one of the two lists to be permitted. Note that unlike allowed_policies the policies listed in allowed_policies_glob will not be added to the token when no policies are specified in the call to /auth/token/create/:role_name.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "disallowed_policies_glob": {
                    "type": "array",
                    "description": "If set, successful token creation via this role will require that no requested policies glob match any of policies in this list. The parameter is a comma-delimited string of policy name globs. Adding any glob that matches \"default\" to this list will prevent \"default\" from being added automatically to created tokens. If combined with disallowed_policies policies need to only match one of the two lists to be blocked.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "orphan": {
                    "type": "boolean",
                    "description": "If true, tokens created against this policy will be orphan tokens (they will have no parent). As such, they will not be automatically revoked by the revocation of any other token."
                  },
                  "renewable": {
                    "type": "boolean",
                    "description": "Set to false to disable the ability of the token to be renewed past its initial TTL. Setting the value to true will allow the token to be renewable up to the system/mount maximum TTL."
                  },
                  "path_suffix": {
                    "type": "string",
                    "description": " If set, tokens created against this role will have the given suffix as part of their path in addition to the role name. This can be useful in certain scenarios, such as keeping the same role name in the future but revoking all tokens created against it before some point in time. The suffix can be changed, allowing new callers to have the new suffix as part of their path, and then tokens with the old suffix can be revoked via /sys/leases/revoke-prefix."
                  },
                  "allowed_entity_aliases": {
                    "type": "array",
                    "description": "String or JSON list of allowed entity aliases. If set, specifies the entity aliases which are allowed to be used during token generation. This field supports globbing. Note that allowed_entity_aliases is not case sensitive.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "token_bound_cidrs": {
                    "type": "array",
                    "description": "List of CIDR blocks; if set, specifies blocks of IP addresses which can authenticate successfully, and ties the resulting token to these blocks as well.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "token_explicit_max_ttl": {
                    "type": "integer",
                    "description": "If set, will encode an explicit max TTL onto the token. This is a hard cap even if token_ttl and token_max_ttl would otherwise allow a renewal."
                  },
                  "token_no_default_policy": {
                    "type": "boolean",
                    "description": "If set, the default policy will not be set on generated tokens; otherwise it will be added to the policies set in token_policies."
                  },
                  "token_num_uses": {
                    "type": "integer",
                    "description": "The maximum number of times a generated token may be used (within its lifetime); 0 means unlimited. If you require the token to have the ability to create child tokens, you will need to set this value to 0."
                  },
                  "token_period": {
                    "type": "integer",
                    "description": "The maximum allowed period value when a periodic token is requested from this role."
                  },
                  "token_type": {
                    "type": "string",
                    "description": "The type of token that should be generated. Can be service, batch, or default to use the mount's tuned default (which unless changed will be service tokens). For token store roles, there are two additional possibilities: default-service and default-batch which specify the type to return unless the client requests a different type at generation time. For machine based authentication cases, you should use batch type tokens.",
                    "enum": [
                      "batch",
                      "service",
                      "default",
                      "default-service",
                      "default-batch"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the token role."
                  }
                },
                "required": [
                  "name"
                ]
              },
              "wrap_info": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string"
                  },
                  "ttl": {
                    "type": "integer"
                  },
                  "creation_time": {
                    "type": "string"
                  },
                  "accessor": {
                    "type": "string"
                  },
                  "creation_path": {
                    "type": "string"
                  },
                  "wrapped_accessor": {
                    "type": "string"
                  }
                },
                "required": [
                  "token",
                  "accessor",
                  "ttl",
                  "creation_time",
                  "creation_path",
                  "wrapped_accessor"
                ]
              },
              "warnings": {
                "type": "array",
                "description": "A list of warnings, e.g. ignored parameters",
                "items": {
                  "type": "string"
                }
              },
              "auth": {
                "type": "object",
                "properties": {
                  "client_token": {
                    "type": "string"
                  },
                  "accessor": {
                    "type": "string"
                  },
                  "token_policies": {
                    "type": "array",
                    "description": "A list of policies for the token. This must be a subset of the policies belonging to the token making the request, unless the calling token is root or contains sudo capabilities to auth/token/create. If not specified, defaults to all the policies of the calling token.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "metadata": {
                    "type": "object",
                    "format": "kvpairs",
                    "description": "Arbitrary key=value metadata to associate with the token",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "lease_duration": {
                    "type": "integer"
                  },
                  "renewable": {
                    "type": "boolean"
                  },
                  "entity_id": {
                    "type": "string"
                  },
                  "token_type": {
                    "type": "string",
                    "enum": [
                      "batch",
                      "service",
                      "default",
                      "default-service",
                      "default-batch"
                    ]
                  },
                  "orphan": {
                    "type": "boolean"
                  },
                  "mfa_requirement": {
                    "type": "boolean"
                  },
                  "num_uses": {
                    "type": "integer"
                  }
                },
                "required": [
                  "client_token",
                  "accessor",
                  "token_policies",
                  "lease_duration",
                  "token_type",
                  "orphan",
                  "num_uses",
                  "renewable"
                ]
              },
              "mount_type": {
                "type": "string"
              }
            },
            "required": [
              "request_id",
              "data"
            ]
          },
          "ReadStaticRoleResponse": {
            "type": "object",
            "properties": {
              "request_id": {
                "type": "string",
                "description": "the id of the request associated with this response"
              },
              "lease_id": {
                "type": "string"
              },
              "renewable": {
                "type": "boolean"
              },
              "lease_duration": {
                "type": "integer"
              },
              "mount_type": {
                "type": "string"
              },
              "data": {
                "type": "object",
                "properties": {
                  "db_name": {
                    "type": "string"
                  },
                  "credential_type": {
                    "type": "string"
                  },
                  "last_vault_rotation": {
                    "type": "string"
                  },
                  "rotation_period": {
                    "type": "string"
                  },
                  "rotation_schedule": {
                    "type": "string"
                  },
                  "rotation_window": {
                    "type": "integer"
                  },
                  "rotation_statements": {
                    "type": "array",
                    "description": "Database statements to be executed to rotate the password for the configured database user",
                    "items": {
                      "type": "string"
                    }
                  },
                  "username": {
                    "type": "string"
                  }
                },
                "required": [
                  "db_name",
                  "credential_type",
                  "last_vault_rotation",
                  "username"
                ]
              }
            },
            "required": [
              "request_id",
              "mount_type",
              "renewable",
              "data"
            ]
          },
          "ReadStaticRoleCredentialsResponse": {
            "type": "object",
            "properties": {
              "request_id": {
                "type": "string",
                "description": "the id of the request associated with this response"
              },
              "lease_id": {
                "type": "string"
              },
              "renewable": {
                "type": "boolean"
              },
              "lease_duration": {
                "type": "integer"
              },
              "mount_type": {
                "type": "string"
              },
              "data": {
                "type": "object",
                "properties": {
                  "last_vault_rotation": {
                    "type": "string"
                  },
                  "rotation_schedule": {
                    "type": "string"
                  },
                  "rotation_period": {
                    "type": "integer"
                  },
                  "rotation_window": {
                    "type": "integer"
                  },
                  "ttl": {
                    "type": "integer"
                  },
                  "password": {
                    "type": "string"
                  },
                  "username": {
                    "type": "string"
                  }
                },
                "required": [
                  "last_vault_rotation",
                  "username",
                  "password",
                  "ttl"
                ]
              }
            },
            "required": [
              "request_id",
              "renewable",
              "data"
            ]
          },
          "ReadRoleResponse": {
            "type": "object",
            "properties": {
              "request_id": {
                "type": "string",
                "description": "the id of the request associated with this response"
              },
              "lease_id": {
                "type": "string"
              },
              "renewable": {
                "type": "boolean"
              },
              "lease_duration": {
                "type": "integer"
              },
              "mount_type": {
                "type": "string"
              },
              "data": {
                "type": "object",
                "properties": {
                  "db_name": {
                    "type": "string"
                  },
                  "credential_type": {
                    "type": "string"
                  },
                  "last_vault_rotation": {
                    "type": "string"
                  },
                  "rotation_period": {
                    "type": "string"
                  },
                  "rotation_schedule": {
                    "type": "string"
                  },
                  "rotation_window": {
                    "type": "integer"
                  },
                  "creation_statements": {
                    "type": "array",
                    "description": "Database statements executed to create and configure a user",
                    "items": {
                      "type": "string"
                    }
                  },
                  "revocation_statements": {
                    "type": "array",
                    "description": "Database statements to be executed to revoke a user",
                    "items": {
                      "type": "string"
                    }
                  },
                  "rollback_statements": {
                    "type": "array",
                    "description": "Database statements to be executed rollback a create operation in the event of an error",
                    "items": {
                      "type": "string"
                    }
                  },
                  "renew_statements": {
                    "type": "array",
                    "description": "Database statements to be executed to renew a user.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "rotation_statements": {
                    "type": "array",
                    "description": "Database statements to be executed to rotate the password for the configured database user",
                    "items": {
                      "type": "string"
                    }
                  },
                  "username": {
                    "type": "string"
                  }
                },
                "required": [
                  "db_name",
                  "creation_statements"
                ]
              }
            },
            "required": [
              "request_id",
              "mount_type",
              "renewable",
              "data"
            ]
          },
          "WriteRoleRequest": {
            "type": "object",
            "properties": {
              "db_name": {
                "type": "string",
                "description": "The name of the database connection to use for this role."
              },
              "default_ttl": {
                "type": "string",
                "description": "Specifies the TTL for the leases associated with this role. Accepts time suffixed strings (1h) or an integer number of seconds. Defaults to system/engine default TTL time."
              },
              "max_ttl": {
                "type": "string",
                "description": "Specifies the maximum TTL for the leases associated with this role. Accepts time suffixed strings (1h) or an integer number of seconds. Defaults to sys/mounts's default TTL time; this value is allowed to be less than the mount max TTL (or, if not set, the system max TTL), but it is not allowed to be longer. See also The TTL General Case."
              },
              "creation_statements": {
                "type": "array",
                "description": "Specifies the database statements executed to create and configure a user.",
                "items": {
                  "type": "string"
                }
              },
              "revocation_statements": {
                "type": "array",
                "description": "Specifies the database statements to be executed to revoke a user.",
                "items": {
                  "type": "string"
                }
              },
              "rollback_statements": {
                "type": "array",
                "description": "Specifies the database statements to be executed rollback a create operation in the event of an error.",
                "items": {
                  "type": "string"
                }
              },
              "renew_statements": {
                "type": "array",
                "description": "Specifies the database statements to be executed to renew a user.",
                "items": {
                  "type": "string"
                }
              },
              "rotation_statements": {
                "type": "array",
                "description": "Specifies the database statements to be executed to rotate the password for a given username.",
                "items": {
                  "type": "string"
                }
              },
              "credential_type": {
                "type": "string",
                "description": "Specifies the type of credential that will be generated for the role. Options include: password, rsa_private_key, client_certificate. See the plugin's API page for credential types supported by individual databases."
              },
              "credential_config": {
                "type": "object",
                "format": "kvpairs",
                "description": "Specifies the configuration for the given 'credential_type'. See documentation for details"
              }
            },
            "required": [
              "db_name",
              "creation_statements"
            ]
          },
          "WriteStaticRoleRequest": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string",
                "description": "Specifies the database username that this Vault role corresponds to."
              },
              "db_name": {
                "type": "string",
                "description": "The name of the database connection to use for this role."
              },
              "rotation_period": {
                "type": "string",
                "description": "Specifies the amount of time Vault should wait before rotating the password. The minimum is 5 seconds. Uses duration format strings. Mutually exclusive with rotation_schedule."
              },
              "rotation_schedule": {
                "type": "string",
                "description": "A cron-style string that will define the schedule on which rotations should occur. This should be a \"standard\" cron-style string made of five fields of which each entry defines the minute, hour, day of month, month, and day of week respectively. For example, a value of '0 0 * * SAT' will set rotations to occur on Saturday at 00:00. Mutually exclusive with rotation_period."
              },
              "rotation_window": {
                "type": "string",
                "description": "Specifies the amount of time in which the rotation is allowed to occur starting from a given rotation_schedule. If the credential is not rotated during this window, due to a failure or otherwise, it will not be rotated until the next scheduled rotation. The minimum is 1 hour. Uses duration format strings. Optional when rotation_schedule is set and disallowed when rotation_period is set."
              },
              "rotation_statements": {
                "type": "array",
                "description": "Specifies the database statements to be executed to rotate the password for the configured database user. Not every plugin type will support this functionality. See the plugin's API page for more information on support and formatting for this parameter.",
                "items": {
                  "type": "string"
                }
              },
              "credential_type": {
                "type": "string",
                "description": "Specifies the type of credential that will be generated for the role. Options include: password, rsa_private_key, client_certificate. See the plugin's API page for credential types supported by individual databases."
              },
              "credential_config": {
                "type": "object",
                "format": "kvpairs",
                "description": "Specifies the configuration for the given 'credential_type'. See documentation for details"
              }
            },
            "required": [
              "username",
              "db_name"
            ]
          },
          "DatabaseConfigRequest": {
            "type": "object",
            "properties": {
              "plugin_name": {
                "type": "string"
              },
              "verify_connection": {
                "type": "boolean"
              },
              "allowed_roles": {
                "type": "array",
                "description": "List of the roles allowed to use this connection. Defaults to empty (no roles), if contains a * any role can use this connection.",
                "items": {
                  "type": "string"
                }
              },
              "connection_url": {
                "type": "string",
                "description": "Specifies the PostgreSQL DSN. This field can be templated and supports passing the username and password parameters in the following format {{field_name}}. Certificate authentication can be used by setting ?sslmode= to be any of the applicable values as outlined in the Postgres SQL documentation and giving the SSL credentials in the sslrootcert, sslcert and sslkey credentials. A templated connection URL is required when using root credential rotation. This field supports both format string types, URI and keyword/value. Both formats support multiple host connection strings. Due to how pgx works, parameters such as sslrootcert, sslcert, sslkey are treated as paths on the Vault server."
              },
              "max_open_connections": {
                "type": "integer",
                "description": "Specifies the maximum number of open connections to the database. Defaults to 4 in v1.18.x"
              },
              "max_idle_connections": {
                "type": "integer",
                "description": "Specifies the maximum number of idle connections to the database. A zero uses the value of max_open_connections and a negative value disables idle connections. If larger than 'max_open_connections' it will be reduced to be equal. Defaults to zero"
              },
              "max_connection_lifetime": {
                "type": "string",
                "description": "Specifies the maximum amount of time a connection may be reused. If <= 0s, connections are reused forever. Defaults to '0s'"
              },
              "username": {
                "type": "string",
                "description": "The root credential username used in the connection URL."
              },
              "password": {
                "type": "string",
                "description": "The root credential password used in the connection URL"
              },
              "tls_ca": {
                "type": "string",
                "description": "The x509 CA file for validating the certificate presented by the PostgreSQL server. Must be PEM encoded."
              },
              "tls_certificate": {
                "type": "string",
                "description": "The x509 client certificate for connecting to the database. Must be PEM encoded."
              },
              "private_key": {
                "type": "string",
                "description": "The secret key used for the x509 client certificate. Must be PEM encoded."
              },
              "username_template": {
                "type": "string",
                "description": "Template describing how dynamic usernames are generated."
              },
              "disable_escaping": {
                "type": "boolean",
                "description": "Turns off the escaping of special characters inside of the username and password fields. See the databases secrets engine docs for more information. Defaults to false."
              },
              "password_authentication": {
                "type": "string",
                "description": "When set to 'scram-sha-256', passwords will be hashed by Vault and stored as-is by PostgreSQL. Using \"scram-sha-256\" requires a minimum version of PostgreSQL 10. Available options are \"scram-sha-256\" and \"password\". The default is \"password\". When set to \"password\", passwords will be sent to PostgreSQL in plaintext format and may appear in PostgreSQL logs as-is. For more information, please refer to the PostgreSQL documentation."
              },
              "root_rotation_statements": {
                "type": "array",
                "description": "Specifies the database statements to be executed to rotate the root user's credentials. See the plugin's API page for more information on support and formatting for this parameter.",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "plugin_name",
              "connection_url"
            ]
          },
          "ReadDatabaseConfigResponse": {
            "type": "object",
            "properties": {
              "request_id": {
                "type": "string",
                "description": "the id of the request associated with this response"
              },
              "lease_id": {
                "type": "string"
              },
              "renewable": {
                "type": "boolean"
              },
              "lease_duration": {
                "type": "integer"
              },
              "mount_type": {
                "type": "string",
                "description": "Only present in hashicorp-vault"
              },
              "data": {
                "type": "object",
                "properties": {
                  "allowed_roles": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "connection_details": {
                    "type": "object",
                    "properties": {
                      "connection_url": {
                        "type": "string"
                      },
                      "password_authentication": {
                        "type": "string"
                      },
                      "username": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "connection_url",
                      "password_authentication",
                      "username"
                    ]
                  },
                  "password_policy": {
                    "type": "string"
                  },
                  "plugin_name": {
                    "type": "string"
                  },
                  "plugin_version": {
                    "type": "string"
                  },
                  "root_credentials_rotate_statements": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "allowed_roles",
                  "connection_details"
                ]
              }
            },
            "required": [
              "request_id",
              "renewable",
              "data"
            ]
          },
          "ReadRoleCredentialsResponse": {
            "type": "object",
            "properties": {
              "request_id": {
                "type": "string",
                "description": "the id of the request associated with this response"
              },
              "lease_id": {
                "type": "string"
              },
              "renewable": {
                "type": "boolean"
              },
              "lease_duration": {
                "type": "integer"
              },
              "mount_type": {
                "type": "string"
              },
              "data": {
                "type": "object",
                "properties": {
                  "last_vault_rotation": {
                    "type": "string"
                  },
                  "ttl": {
                    "type": "integer"
                  },
                  "password": {
                    "type": "string"
                  },
                  "username": {
                    "type": "string"
                  }
                },
                "required": [
                  "username",
                  "password"
                ]
              }
            },
            "required": [
              "request_id",
              "renewable",
              "data"
            ]
          },
          "VaultApiResponse": {
            "type": "object",
            "properties": {
              "request_id": {
                "type": "string"
              },
              "lease_id": {
                "type": "string"
              },
              "renewable": {
                "type": "boolean"
              },
              "lease_duration": {
                "type": "integer"
              },
              "data": {
                "type": "object"
              },
              "wrap_info": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string"
                  },
                  "ttl": {
                    "type": "integer"
                  },
                  "creation_time": {
                    "type": "string"
                  },
                  "accessor": {
                    "type": "string"
                  },
                  "creation_path": {
                    "type": "string"
                  },
                  "wrapped_accessor": {
                    "type": "string"
                  }
                },
                "required": [
                  "token",
                  "accessor",
                  "ttl",
                  "creation_time",
                  "creation_path",
                  "wrapped_accessor"
                ]
              },
              "warnings": {
                "type": "array",
                "description": "A list of warnings, e.g. ignored parameters",
                "items": {
                  "type": "string"
                }
              },
              "auth": {
                "type": "object",
                "properties": {
                  "client_token": {
                    "type": "string"
                  },
                  "accessor": {
                    "type": "string"
                  },
                  "token_policies": {
                    "type": "array",
                    "description": "A list of policies for the token. This must be a subset of the policies belonging to the token making the request, unless the calling token is root or contains sudo capabilities to auth/token/create. If not specified, defaults to all the policies of the calling token.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "metadata": {
                    "type": "object",
                    "format": "kvpairs",
                    "description": "Arbitrary key=value metadata to associate with the token",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "lease_duration": {
                    "type": "integer"
                  },
                  "renewable": {
                    "type": "boolean"
                  },
                  "entity_id": {
                    "type": "string"
                  },
                  "token_type": {
                    "type": "string",
                    "enum": [
                      "batch",
                      "service",
                      "default",
                      "default-service",
                      "default-batch"
                    ]
                  },
                  "orphan": {
                    "type": "boolean"
                  },
                  "mfa_requirement": {
                    "type": "boolean"
                  },
                  "num_uses": {
                    "type": "integer"
                  }
                },
                "required": [
                  "client_token",
                  "accessor",
                  "token_policies",
                  "lease_duration",
                  "token_type",
                  "orphan",
                  "num_uses",
                  "renewable"
                ]
              },
              "mount_type": {
                "type": "string"
              }
            },
            "required": [
              "request_id"
            ]
          },
          "VaultErrorsResponse": {
            "type": "object",
            "properties": {
              "errors": {
                "type": "array",
                "description": "List of errors",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "parameters": {
          "VaultTokenHeader": {
            "description": "Vault Token required for authentication",
            "name": "X-Vault-Token",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          "WrapTTLHeader": {
            "description": "Use the X-Vault-Wrap-TTL header with any Vault API call where you want to wrap the response.",
            "name": "X-Vault-Wrap-TTL",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    }
    
    """#
  }
}
