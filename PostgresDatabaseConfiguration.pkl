//===----------------------------------------------------------------------===//
//  Copyright (c) 2025 Javier Cuesta
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//===----------------------------------------------------------------------===//

/// Endpoints to manage Database secret engine. The engine base path is parametric.
/// This module contains all the generic schemas for the database engine
/// https://developer.hashicorp.com/vault/api-docs/secret/databases#configure-connection
module PostgresDatabaseConfiguration

amends "@openapi/Document.pkl"
import "@openapi/PathItem.pkl"
import "@openapi/Reference.pkl"
import "@openapi/Schema.pkl"

/// Parameter name in the crud endpoint
local parameterConnectionName = "connection_name"
local parameterPluginName = "plugin_name"
local parameterRoleName = "role_name"
local parameterEnginePathName = "engine_path"

paths {
  ["/{\(parameterEnginePathName)}/config/{\(parameterConnectionName)}"] {
    description = "This endpoint configures the connection string used to communicate with the desired database. In addition to the parameters listed here, each Database plugin has additional, database plugin specific, parameters for this endpoint. Please read the HTTP API for the plugin you'd wish to configure to see the full list of additional parameters."
    parameters {
      new {
        name = parameterEnginePathName
        description = "Database engine path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new {
        name = parameterConnectionName
        description = "Specifies the name for this database connection. This is specified as part of the URL."
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
    }
    get {
      summary = "This endpoint returns the configuration settings for a connection."
      description = "Read database connection configuration"
      operationId = "read-database-configuration"
      tags {
        "secrets"
        "database"
      }
      responses {
        ["200"] {
          description = "OK"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/ReadDatabaseConfigResponse"
              }
            }
          }
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
        ["500"] {
          description = "Internal Server Error"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
    post {
      summary = "This endpoint configures the connection string used to communicate with the desired database"
      description = "This endpoint configures the connection string used to communicate with the desired database"
      operationId = "configure-database"
      tags {
        "secrets"
        "database"
      }
      requestBody {
        required = true
        content {
          ["application/json"] {
            schema = new Reference {
              `$ref` = "#/components/schemas/DatabaseConfigRequest"
            }
          }
        }
      }
      responses {
        ["204"] {
          description = "OK"
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
        ["500"] {
          description = "Internal Server Error"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }

    `delete` {
      summary = "Deletes a vault database connection"
      description = "This endpoint deletes a connection"
      operationId = "delete-database-connection"
      tags {
        "secrets"
        "database"
      }
      responses {
        ["204"] {
          description = "No Content"
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }

        ["500"] {
          description = "Internal Server Error"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/{\(parameterEnginePathName)}/reset/{\(parameterConnectionName)}"] {
    description = "This endpoint closes a connection and it's underlying plugin and restarts it with the configuration stored in the barrier."
    parameters {
      new {
        name = parameterEnginePathName
        description = "Database engine path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new {
        name = parameterConnectionName
        description = "Specifies the name of the connection to reset"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
    }
    post {
      summary = "This endpoint closes a connection"
      description = "This endpoint closes a connection and it's underlying plugin and restarts it with the configuration stored in the barrier."
      operationId = "database-reset"
      tags {
        "secrets"
        "database"
      }
      responses {
        ["204"] {
          description = "OK"
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
        ["500"] {
          description = "Internal Server Error"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/{\(parameterEnginePathName)}/reload/{\(parameterPluginName)}"] {
    description = "This endpoint performs the same operation as reset connection but for all connections that reference a specific plugin name. This can be useful to restart a specific plugin after it's been upgraded in the plugin catalog."
    parameters {
      new {
        name = parameterEnginePathName
        description = "Database engine path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new {
        name = parameterPluginName
        description = "Specifies the name of the plugin for which all connections should be reset."
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
    }
    post {
      summary = "This endpoint performs the same operation as reset connection but for all connections that reference a specific plugin name"
      description = "This endpoint performs the same operation as reset connection but for all connections that reference a specific plugin name. This can be useful to restart a specific plugin after it's been upgraded in the plugin catalog."
      operationId = "reload-database-plugin"
      tags {
        "secrets"
        "database"
      }
      responses {
        ["204"] {
          description = "OK"
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
        ["500"] {
          description = "Internal Server Error"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/{\(parameterEnginePathName)}/rotate-root/{\(parameterConnectionName)}"] {
    description = "This endpoint is used to rotate the \"root\" user credentials stored for the database connection. This user must have permissions to update its own password."
    parameters {
      new {
        name = parameterEnginePathName
        description = "Database engine path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new {
        name = parameterConnectionName
        description = "rotate the 'root' user credentials stored for the database connection."
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
    }
    post {
      summary = "Rotate the vaults 'root' postgres role credentials"
      description = "the root user's password will not be accessible once rotated so it is highly recommended that you create a user for Vault to utilize rather than using the actual root user."
      operationId = "database-rotate-root"
      tags {
        "secrets"
        "database"
      }
      responses {
        ["204"] {
          description = "OK"
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/{\(parameterEnginePathName)}/static-roles/{\(parameterRoleName)}"] {
    description = "This endpoint creates or updates a static role definition. Static Roles are a 1-to-1 mapping of a Vault Role to a user in a database which are automatically rotated based on the configured 'rotation_period' or 'rotation_schedule'."
    parameters {
      new {
        name = parameterEnginePathName
        description = "Database engine path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new {
        name = parameterRoleName
        description = "Specifies the name of the role to create. It has to be in the allowed list"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
    }
    post {
      summary = "Creates or updates a static role definition"
      description = "Vault will rotate the password when creating a static role. Vault must do this in order to know the password."
      operationId = "database-create-static-role"
      tags {
        "secrets"
        "database"
      }
      requestBody {
        required = true
        content {
          ["application/json"] {
            schema = new Reference {
              `$ref` = "#/components/schemas/WriteStaticRoleRequest"
            }
          }
        }
      }
      responses {
        ["200"] {
          description = "OK"
        }
        ["204"] {
          description = "No Content"
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
        ["500"] {
          description = "Internal Server Error"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
    get {
      summary = "Creates or updates a static role definition"
      description = "This endpoint queries the static role definition."
      operationId = "database-read-static-role"
      tags {
        "secrets"
        "database"
      }
      responses {
        ["200"] {
          description = "OK"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/ReadStaticRoleResponse"
              }
            }
          }
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }

        ["500"] {
          description = "Internal Server Error"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
    `delete` {
      summary = "Deletes a static role definition"
      description = "This endpoint deletes the static role definition. The user, having been defined externally, must be cleaned up manually."
      operationId = "database-delete-static-role"
      tags {
        "secrets"
        "database"
      }
      responses {
        ["204"] {
          description = "No Content"
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }

        ["500"] {
          description = "Internal Server Error"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/{\(parameterEnginePathName)}/static-creds/{\(parameterRoleName)}"] {
    description = "This endpoint returns the current credentials based on the named static role."
    parameters {
      new {
        name = parameterEnginePathName
        description = "Database engine path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new {
        name = parameterRoleName
        description = "Specifies the name of the static role. It has to be in the allowed list"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
    }
    get {
      summary = "Read current credentials based on the named static role."
      description = "returns the current credentials based on the named static role."
      operationId = "database-read-static-role-credentials"
      tags {
        "secrets"
        "database"
      }
      responses {
        ["200"] {
          description = "OK"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/ReadStaticRoleCredentialsResponse"
              }
            }
          }
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }

        ["500"] {
          description = "Internal Server Error"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/{\(parameterEnginePathName)}/roles/{\(parameterRoleName)}"] {
    description = "This endpoint creates or updates a dynamic role definition."
    parameters {
      new {
        name = parameterEnginePathName
        description = "Database engine path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new {
        name = parameterRoleName
        description = "Specifies the name of the role to create. It has to be in the allowed list"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
    }
    post {
      summary = "Creates or updates a role definition"
      description = "Creates or updates a dynamic role definition. This endpoint distinguishes between create and update ACL capabilities."
      operationId = "database-create-role"
      tags {
        "secrets"
        "database"
      }
      requestBody {
        required = true
        content {
          ["application/json"] {
            schema = new Reference {
              `$ref` = "#/components/schemas/WriteRoleRequest"
            }
          }
        }
      }
      responses {
        ["204"] {
          description = "No Content"
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }

        ["500"] {
          description = "Internal Server Error"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
    get {
      summary = "Queries the role definition"
      description = "This endpoint queries the role definition."
      operationId = "database-read-role"
      tags {
        "secrets"
        "database"
      }
      responses {
        ["200"] {
          description = "OK"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/ReadRoleResponse"
              }
            }
          }
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }

        ["500"] {
          description = "Internal Server Error"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
    `delete` {
      summary = "Deletes a role definition"
      description = "This endpoint deletes the dynamic role definition. The user, having been defined externally, must be cleaned up manually."
      operationId = "database-delete-role"
      tags {
        "secrets"
        "database"
      }
      responses {
        ["204"] {
          description = "No Content"
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }

        ["500"] {
          description = "Internal Server Error"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/{\(parameterEnginePathName)}/creds/{\(parameterRoleName)}"] {
    description = "This endpoint returns the current credentials based on the named role."
    parameters {
      new {
        name = parameterEnginePathName
        description = "Database engine path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new {
        name = parameterRoleName
        description = "Specifies the name of the role. It has to be in the allowed list"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
    }
    get {
      summary = "Read current credentials based on the named role."
      description = "returns the current credentials based on the named role."
      operationId = "database-read-role-credentials"
      tags {
        "secrets"
        "database"
      }
      responses {
        ["200"] {
          description = "OK"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/ReadRoleCredentialsResponse"
              }
            }
          }
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }

        ["500"] {
          description = "Internal Server Error"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

}

components {
  schemas {
    ["ReadStaticRoleResponse"] {
      type = "object"
      properties {
        ["request_id"] {
          type = "string"
          description = "the id of the request associated with this response"
        }
        ["lease_id"] {
          type = "string"
        }
        ["renewable"] {
          type = "boolean"
        }
        ["lease_duration"] {
          type = "integer"
        }
        ["mount_type"] {
          type = "string"
        }
        ["data"] {
          type = "object"
          properties {
            ["db_name"] {
              type = "string"
            }
            ["credential_type"] {
              type = "string"
            }
            ["last_vault_rotation"] {
              type = "string"
            }
            ["rotation_period"] {
              type = "string"
            }
            ["rotation_schedule"] {
              type = "string"
            }
            ["rotation_window"] {
              type = "integer"
            }
            ["rotation_statements"] {
              type = "array"
              description = "Database statements to be executed to rotate the password for the configured database user"
              items = new Schema {
                type = "string"
              }
            }
            ["username"] {
              type = "string"
            }
          }
          required {
            "db_name"
            "credential_type"
            "last_vault_rotation"
            "username"
          }
        }
      }
      required {
        "request_id"
        "mount_type"
        "renewable"
        "data"
      }
    }

    ["ReadStaticRoleCredentialsResponse"] {
      type = "object"
      properties {
        ["request_id"] {
          type = "string"
          description = "the id of the request associated with this response"
        }
        ["lease_id"] {
          type = "string"
        }
        ["renewable"] {
          type = "boolean"
        }
        ["lease_duration"] {
          type = "integer"
        }
        ["mount_type"] {
          type = "string"
        }
        ["data"] {
          type = "object"
          properties {
            ["last_vault_rotation"] {
              type = "string"
            }
            ["rotation_schedule"] {
              type = "string"
            }
            ["rotation_period"] {
              type = "integer"
            }
            ["rotation_window"] {
              type = "integer"
            }
            ["ttl"] {
              type = "integer"
            }
            ["password"] {
              type = "string"
            }
            ["username"] {
              type = "string"
            }
          }
          required {
            "last_vault_rotation"
            "username"
            "password"
            "ttl"
          }
        }
      }
      required {
        "request_id"
        "renewable"
        "data"
      }
    }

    ["ReadRoleResponse"] {
      type = "object"
      properties {
        ["request_id"] {
          type = "string"
          description = "the id of the request associated with this response"
        }
        ["lease_id"] {
          type = "string"
        }
        ["renewable"] {
          type = "boolean"
        }
        ["lease_duration"] {
          type = "integer"
        }
        ["mount_type"] {
          type = "string"
        }
        ["data"] {
          type = "object"
          properties {
            ["db_name"] {
              type = "string"
            }
            ["credential_type"] {
              type = "string"
            }
            ["last_vault_rotation"] {
              type = "string"
            }
            ["rotation_period"] {
              type = "string"
            }
            ["rotation_schedule"] {
              type = "string"
            }
            ["rotation_window"] {
              type = "integer"
            }
            ["creation_statements"] {
              type = "array"
              description = "Database statements executed to create and configure a user"
              items = new Schema {
                type = "string"
              }
            }
            ["revocation_statements"] {
              type = "array"
              description = "Database statements to be executed to revoke a user"
              items = new Schema {
                type = "string"
              }
            }
            ["rollback_statements"] {
              type = "array"
              description = "Database statements to be executed rollback a create operation in the event of an error"
              items = new Schema {
                type = "string"
              }
            }
            ["renew_statements"] {
              type = "array"
              description = "Database statements to be executed to renew a user."
              items = new Schema {
                type = "string"
              }
            }
            ["rotation_statements"] {
              type = "array"
              description = "Database statements to be executed to rotate the password for the configured database user"
              items = new Schema {
                type = "string"
              }
            }
            ["username"] {
              type = "string"
            }
          }
          required {
            "db_name"
            "creation_statements"
          }
        }
      }
      required {
        "request_id"
        "mount_type"
        "renewable"
        "data"
      }
    }
    ["WriteRoleRequest"] {
      type = "object"
      properties {
        ["db_name"] {
          type = "string"
          description = "The name of the database connection to use for this role."
        }
        ["default_ttl"] {
          type = "string"
          description = "Specifies the TTL for the leases associated with this role. Accepts time suffixed strings (1h) or an integer number of seconds. Defaults to system/engine default TTL time."
        }
        ["max_ttl"] {
          type = "string"
          description = "Specifies the maximum TTL for the leases associated with this role. Accepts time suffixed strings (1h) or an integer number of seconds. Defaults to sys/mounts's default TTL time; this value is allowed to be less than the mount max TTL (or, if not set, the system max TTL), but it is not allowed to be longer. See also The TTL General Case."
        }
        ["creation_statements"] {
          type = "array"
          description = "Specifies the database statements executed to create and configure a user."
          items = new Schema {
            type = "string"
          }
        }
        ["revocation_statements"] {
          type = "array"
          description = "Specifies the database statements to be executed to revoke a user."
          items = new Schema {
            type = "string"
          }
        }
        ["rollback_statements"] {
          type = "array"
          description = "Specifies the database statements to be executed rollback a create operation in the event of an error."
          items = new Schema {
            type = "string"
          }
        }
        ["renew_statements"] {
          type = "array"
          description = "Specifies the database statements to be executed to renew a user."
          items = new Schema {
            type = "string"
          }
        }
        ["rotation_statements"] {
          type = "array"
          description = "Specifies the database statements to be executed to rotate the password for a given username."
          items = new Schema {
            type = "string"
          }
        }
        ["credential_type"] {
          type = "string"
          description = "Specifies the type of credential that will be generated for the role. Options include: password, rsa_private_key, client_certificate. See the plugin's API page for credential types supported by individual databases."
        }
        ["credential_config"] {
          type = "object"
          description = "Specifies the configuration for the given 'credential_type'. See documentation for details"
          format = "kvpairs"
        }

      }
      required {
        "db_name"
        "creation_statements"
      }
    }

    ["WriteStaticRoleRequest"] {
      type = "object"
      properties {
        ["username"] {
          type = "string"
          description = "Specifies the database username that this Vault role corresponds to."
        }
        ["db_name"] {
          type = "string"
          description = "The name of the database connection to use for this role."
        }
        ["rotation_period"] {
          type = "string"
          description = "Specifies the amount of time Vault should wait before rotating the password. The minimum is 5 seconds. Uses duration format strings. Mutually exclusive with rotation_schedule."
        }
        ["rotation_schedule"] {
          type = "string"
          description = "A cron-style string that will define the schedule on which rotations should occur. This should be a \"standard\" cron-style string made of five fields of which each entry defines the minute, hour, day of month, month, and day of week respectively. For example, a value of '0 0 * * SAT' will set rotations to occur on Saturday at 00:00. Mutually exclusive with rotation_period."
        }
        ["rotation_window"] {
          type = "string"
          description = "Specifies the amount of time in which the rotation is allowed to occur starting from a given rotation_schedule. If the credential is not rotated during this window, due to a failure or otherwise, it will not be rotated until the next scheduled rotation. The minimum is 1 hour. Uses duration format strings. Optional when rotation_schedule is set and disallowed when rotation_period is set."
        }
        ["rotation_statements"] {
          type = "array"
          description = "Specifies the database statements to be executed to rotate the password for the configured database user. Not every plugin type will support this functionality. See the plugin's API page for more information on support and formatting for this parameter."
          items = new Schema {
            type = "string"
          }
        }
        ["credential_type"] {
          type = "string"
          description = "Specifies the type of credential that will be generated for the role. Options include: password, rsa_private_key, client_certificate. See the plugin's API page for credential types supported by individual databases."
        }
        ["credential_config"] {
          type = "object"
          description = "Specifies the configuration for the given 'credential_type'. See documentation for details"
          format = "kvpairs"
        }

      }
      required {
        "username"
        "db_name"
      }
    }
    ["DatabaseConfigRequest"] {
      type = "object"
      properties {
        ["plugin_name"] {
          type = "string"
        }
        ["verify_connection"] {
          type = "boolean"
        }
        ["allowed_roles"] {
          type = "array"
          description = "List of the roles allowed to use this connection. Defaults to empty (no roles), if contains a * any role can use this connection."
          items = new Schema {
            type = "string"
          }
        }
        ["connection_url"] {
          type = "string"
          description = "Specifies the PostgreSQL DSN. This field can be templated and supports passing the username and password parameters in the following format {{field_name}}. Certificate authentication can be used by setting ?sslmode= to be any of the applicable values as outlined in the Postgres SQL documentation and giving the SSL credentials in the sslrootcert, sslcert and sslkey credentials. A templated connection URL is required when using root credential rotation. This field supports both format string types, URI and keyword/value. Both formats support multiple host connection strings. Due to how pgx works, parameters such as sslrootcert, sslcert, sslkey are treated as paths on the Vault server."
        }
        ["max_open_connections"] {
          type = "integer"
          description = "Specifies the maximum number of open connections to the database. Defaults to 4 in v1.18.x"
        }
        ["max_idle_connections"] {
          type = "integer"
          description = "Specifies the maximum number of idle connections to the database. A zero uses the value of max_open_connections and a negative value disables idle connections. If larger than 'max_open_connections' it will be reduced to be equal. Defaults to zero"
        }
        ["max_connection_lifetime"] {
          type = "string"
          description = "Specifies the maximum amount of time a connection may be reused. If <= 0s, connections are reused forever. Defaults to '0s'"
        }
        ["username"] {
          type = "string"
          description = "The root credential username used in the connection URL."
        }
        ["password"] {
          type = "string"
          description = "The root credential password used in the connection URL"
        }
        ["tls_ca"] {
          type = "string"
          description = "The x509 CA file for validating the certificate presented by the PostgreSQL server. Must be PEM encoded."
        }
        ["tls_certificate"] {
          type = "string"
          description = "The x509 client certificate for connecting to the database. Must be PEM encoded."
        }
        ["private_key"] {
          type = "string"
          description = "The secret key used for the x509 client certificate. Must be PEM encoded."
        }
        ["username_template"] {
          type = "string"
          description = "Template describing how dynamic usernames are generated."
        }
        ["disable_escaping"] {
          type = "boolean"
          description = "Turns off the escaping of special characters inside of the username and password fields. See the databases secrets engine docs for more information. Defaults to false."
        }
        ["password_authentication"] {
          //       // schema = new Schema {
          //       //   anyOf {
          //       //     new Reference {
          //       //       `$ref` = "#/components/schemas/GenerateAppRoleSecretIdResponse"
          //       //     }
          //       //     new Reference {
          //       //       `$ref` = "#/components/schemas/WrapAppRoleSecretIdResponse"
          //       //     }
          //       //   }
          //       // }
          // enum {
          //   "password"
          //   "scram-sha-256"
          // }
          
          type = "string"
          description = "When set to 'scram-sha-256', passwords will be hashed by Vault and stored as-is by PostgreSQL. Using \"scram-sha-256\" requires a minimum version of PostgreSQL 10. Available options are \"scram-sha-256\" and \"password\". The default is \"password\". When set to \"password\", passwords will be sent to PostgreSQL in plaintext format and may appear in PostgreSQL logs as-is. For more information, please refer to the PostgreSQL documentation."
        }
        ["root_rotation_statements"] {
          type = "array"
          description = "Specifies the database statements to be executed to rotate the root user's credentials. See the plugin's API page for more information on support and formatting for this parameter."
          items = new Schema {
            type = "string"
          }
        }
      }
      required {
        "plugin_name"
        "connection_url"
      }
    }

    ["ReadDatabaseConfigResponse"] {
      type = "object"
      properties {
        ["request_id"] {
          type = "string"
          description = "the id of the request associated with this response"
        }
        ["lease_id"] {
          type = "string"
        }
        ["renewable"] {
          type = "boolean"
        }
        ["lease_duration"] {
          type = "integer"
        }
        ["mount_type"] {
          type = "string"
          description = "Only present in hashicorp-vault"
        }
        ["data"] {
          type = "object"
          properties {
            ["allowed_roles"] {
              type = "array"
              items = new Schema {
                type = "string"
              }
            }
            ["connection_details"] {
              type = "object"
              properties {
                ["connection_url"] {
                  type = "string"
                }
                ["password_authentication"] {
                  type = "string"
                }
                ["username"] {
                  type = "string"
                }
              }
              required {
                "connection_url"
                "password_authentication"
                "username"
              }
            }
            ["password_policy"] {
              type = "string"
            }
            ["plugin_name"] {
              type = "string"
            }
            ["plugin_version"] {
              type = "string"
            }
            ["root_credentials_rotate_statements"] {
              type = "array"
              items = new Schema {
                type = "string"
              }
            }
          }
          required {
            "allowed_roles"
            "connection_details"
          }
        }
      }
      required {
        "request_id"
        "renewable"
        "data"
      }
    }

    ["ReadRoleCredentialsResponse"] {
      type = "object"
      properties {
        ["request_id"] {
          type = "string"
          description = "the id of the request associated with this response"
        }
        ["lease_id"] {
          type = "string"
        }
        ["renewable"] {
          type = "boolean"
        }
        ["lease_duration"] {
          type = "integer"
        }
        ["mount_type"] {
          type = "string"
        }
        ["data"] {
          type = "object"
          properties {
            ["last_vault_rotation"] {
              type = "string"
            }
            ["ttl"] {
              type = "integer"
            }
            ["password"] {
              type = "string"
            }
            ["username"] {
              type = "string"
            }
          }
          required {
            "username"
            "password"
          }
        }
      }
      required {
        "request_id"
        "renewable"
        "data"
      }
    }
  }
}
