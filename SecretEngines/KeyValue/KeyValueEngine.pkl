//===----------------------------------------------------------------------===//
//  Copyright (c) 2025 Javier Cuesta
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//===----------------------------------------------------------------------===//

module KeyValueEngine

amends "@openapi/Document.pkl"
import "@openapi/PathItem.pkl"
import "@openapi/Reference.pkl"
import "@openapi/Schema.pkl"

import ".../VaultDataResponse.pkl"
import ".../VaultRequestBody.pkl"

/// Parameter name in the crud endpoint
local parameterKVPathName = "kv_path"
local secretKeyParameter = "secret_key"

paths {
  ["/{\(parameterKVPathName)}/config"] {
    parameters {
      new {
        name = parameterKVPathName
        description = "Key-value engine path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
    }
    description = "This path configures backend level settings that are applied to every key in the key-value store"
    get {
      summary = "This path retrieves the current configuration for the secrets backend at the given path."
      description = "This path retrieves the current configuration for the secrets backend at the given path."
      operationId = "read-kv-secrets-config"
      tags {
        "secrets"
        "kv"
      }
      responses {
        ["200"] {
          description = "Ok"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/KVSecretConfigResponse"
              }
            }
          }
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
    post {
      summary = "This path configures backend level settings that are applied to every key in the key-value store."
      description = "This path configures backend level settings that are applied to every key in the key-value store."
      operationId = "config-kv-secrets"
      tags {
        "secrets"
        "kv"
      }
      requestBody {
        required = true
        content {
          ["application/json"] {
            schema = VaultRequestBody.kvSecretConfig
          }
        }
      }
      responses {
        ["204"] {
          description = "NoContent"
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/{\(parameterKVPathName)}/data/{\(secretKeyParameter)}"] {
    description = "Server secrets endpoint"
    parameters {
      new {
        name = "version"
        `in` = "query"
        description = "Specifies the version to return. If not set the latest version is returned."
        required = false
        schema {
          type = "integer"
          minimum = 0
        }
      }
      new {
        name = parameterKVPathName
        description = "Key-value engine path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new {
        name = secretKeyParameter
        description = "The key path for a stored secret in this path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
    }
    post {
      summary = "Writes a kv secret"
      description = "Writes a kv secret"
      operationId = "write-kv-secrets"
      tags {
        "secrets"
      }
      requestBody {
        required = true
        content {
          ["application/json"] {
            schema = new Reference {
              `$ref` = "#/components/schemas/WriteOrPatchKVSecretRequest"
            }
          }
        }
      }
      responses {
        ["200"] {
          description = "OK"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/WriteSecretResponse"
              }
            }
          }
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
    get {
      summary = "Reads an existing secret"
      description = "Reads an existing secret"
      operationId = "read-kv-secrets"
      tags {
        "secrets"
      }
      responses {
        ["200"] {
          description = "OK"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/ReadSecretResponse"
              }
            }
          }
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
    patch {
      summary = "Patch a kv secret"
      description = "This endpoint provides the ability to patch an existing secret at the specified location. The secret must neither be deleted nor destroyed. The calling token must have an ACL policy granting the patch capability. A new version will be created upon successfully applying a patch with the provided data."
      operationId = "patch-kv-secrets"
      tags {
        "secrets"
      }
      requestBody {
        required = true
        content {
          ["application/merge-patch+json"] {
            schema = new Reference {
              `$ref` = "#/components/schemas/WriteOrPatchKVSecretRequest"
            }
          }
        }
      }
      responses {
        ["200"] {
          description = "OK"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/WriteSecretResponse"
              }
            }
          }
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
    `delete`{
      summary = "This endpoint issues a soft delete of the secret's latest version at the specified location."
      description = "This endpoint issues a soft delete of the secret's latest version at the specified location. This marks the version as deleted and will stop it from being returned from reads, but the underlying data will not be removed. A delete can be undone using the undelete path."
      operationId = "delete-latest-kv-secrets"
      tags {
        "secrets"
      }
      responses {
        ["204"] {
          description = "NoContent"
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/{\(parameterKVPathName)}/delete/{\(secretKeyParameter)}"] {
    description = "This endpoint issues a soft delete of the specified versions of the secret. This marks the versions as deleted and will stop them from being returned from reads, but the underlying data will not be removed. A delete can be undone using the undelete path."
    parameters {
      new {
        name = parameterKVPathName
        description = "Key-value engine path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new {
        name = secretKeyParameter
        description = "The key path for a stored secret in this path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
    }
    `post`{
      summary = "This endpoint issues a soft delete of the specified versions of the secret."
      description = "This endpoint issues a soft delete of the specified versions of the secret. This marks the version as deleted and will stop it from being returned from reads, but the underlying data will not be removed. A delete can be undone using the undelete path."
      operationId = "delete-kv-secrets"
      tags {
        "secrets"
      }
      requestBody {
        required = true
        content {
          ["application/json"] {
            schema = (VaultRequestBody.secretVersions) {
              properties {
                ["versions"] {
                  description = "The versions to be deleted. The versioned data will not be deleted, but it will no longer be returned in normal get requests."
                }
              }
            }
          }
        }
      }
      responses {
        ["204"] {
          description = "NoContent"
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/{\(parameterKVPathName)}/undelete/{\(secretKeyParameter)}"] {
    description = "Undeletes the data for the provided version and path in the key-value store. This restores the data, allowing it to be returned on get requests."
    parameters {
      new {
        name = parameterKVPathName
        description = "Key-value engine path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new {
        name = secretKeyParameter
        description = "The key path for a stored secret in this path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
    }
    post {
      summary = "Undeletes the data for the provided version and path in the key-value store."
      description = "Undeletes the data for the provided version and path in the key-value store. This restores the data, allowing it to be returned on get requests."
      operationId = "undelete-kv-secrets"
      tags {
        "secrets"
      }
      requestBody {
        required = true
        content {
          ["application/json"] {
            schema = (VaultRequestBody.secretVersions) {
              properties {
                ["versions"] {
                  description = "The versions to undelete. The versions will be restored and their data will be returned on normal get requests."
                }
              }
            }
          }
        }
      }
      responses {
        ["204"] {
          description = "NoContent"
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/{\(parameterKVPathName)}/destroy/{\(secretKeyParameter)}"] {
    description = "Permanently removes the specified version data for the provided key and version numbers from the key-value store."
    parameters {
      new {
        name = parameterKVPathName
        description = "Key-value engine path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new {
        name = secretKeyParameter
        description = "The key path for a stored secret in this path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
    }
    put {
      summary = "Permanently removes the specified version data for the provided key and version numbers from the key-value store."
      description = "Permanently removes the specified version data for the provided key and version numbers from the key-value store."
      operationId = "destroy-kv-secrets"
      tags {
        "secrets"
      }
      requestBody {
        required = true
        content {
          ["application/json"] {
            schema = (VaultRequestBody.secretVersions) {
              properties {
                ["versions"] {
                  description = "The versions to destroy. Their data will be permanently deleted."
                }
              }
            }
          }
        }
      }
      responses {
        ["204"] {
          description = "NoContent"
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/{\(parameterKVPathName)}/subkeys/{\(secretKeyParameter)}"] {
    description = "This endpoint provides the subkeys within a secret entry that exists at the requested path."
    parameters {
      new {
        name = "version"
        `in` = "query"
        description = "Specifies the version to return. If not set the latest version is returned."
        required = false
        schema {
          type = "integer"
          minimum = 0
        }
      }
      new {
        name = "depth"
        `in` = "query"
        description = "Specifies the deepest nesting level to provide in the output. The default value 0 will not impose any limit. If non-zero, keys that reside at the specified depth value will be artificially treated as leaves and will thus be null even if further underlying subkeys exist."
        required = false
        schema {
          type = "integer"
          minimum = 0
        }
      }
      new {
        name = parameterKVPathName
        description = "Key-value engine path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new {
        name = secretKeyParameter
        description = "The key path for a stored secret in this path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
    }
    get {
      summary = "This endpoint provides the subkeys within a secret entry that exists at the requested path"
      description = "The secret entry at this path will be retrieved and stripped of all data by replacing underlying values of leaf keys (i.e. non-map keys or map keys with no underlying subkeys) with null."
      operationId = "subkeys-kv-secrets"
      tags {
        "secrets"
      }
      responses {
        ["200"] {
          description = "OK"
          content {
            ["application/json"] {
              schema = (VaultDataResponse) {
                properties  {
                  ["data"] {
                    type = "object"
                    properties {
                      ["subkeys"] {
                        type = "object"
                      }
                    }
                    required {
                      "subkeys"
                    }
                  }
                }
              }
            }
          }
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/{\(parameterKVPathName)}/metadata/{\(secretKeyParameter)}"] {
    description = "This endpoint retrieves the metadata and versions for the secret at the specified path. Metadata is version-agnostic."
    parameters {
      new {
        name = parameterKVPathName
        description = "Key-value engine path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new {
        name = secretKeyParameter
        description = "The key path for a stored secret in this path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
    }
    get {
      summary = "This endpoint retrieves the metadata and versions for the secret at the specified path"
      description = "This endpoint retrieves the metadata and versions for the secret at the specified path"
      operationId = "read-metadata-kv-secrets"
      tags {
        "secrets"
      }
      responses {
        ["200"] {
          description = "OK"
          content {
            ["application/json"] {
              schema = (VaultDataResponse) {
                properties  {
                  ["data"] = (VaultRequestBody.kvStoreMetadata) {
                    properties {
                      ["created_time"] {
                        type = "string"
                      }
                      ["current_version"] {
                        type = "integer"
                      }
                      ["oldest_version"] {
                        type = "integer"
                      }
                      ["updated_time"] {
                        type = "string"
                      }
                      ["versions"] {
                        type = "object"
                        description = "List of version metadata"
                        format = "kvpairs"
                        additionalProperties {
                          type = "object"
                          properties {
                            ["created_time"] {
                              type = "string"
                            }
                            ["deletion_time"] {
                              type = "string"
                            }
                            ["destroyed"] {
                              type = "boolean"
                            }
                          }
                          required {
                            "created_time"
                            "destroyed"
                          }
                        }
                      }
                    }
                    required {
                      "created_time"
                      "current_version"
                      "updated_time"
                      "versions"
                    }
                  }
                }
              }
            }
          }
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
    post {
      summary = "This endpoint creates or updates the metadata of a secret at the specified location."
      description = "This endpoint creates or updates the metadata of a secret at the specified location. It does not create a new version."
      operationId = "update-metadata-kv-secrets"
      tags {
        "secrets"
      }
      requestBody {
        required = true
        content {
          ["application/json"] {
            schema = VaultRequestBody.kvStoreMetadata
          }
        }
      }
      responses {
        ["204"] {
          description = "Metadata updated"
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
    `delete` {
      summary = "This endpoint permanently deletes the key metadata and all version data for the specified key."
      description = "This endpoint permanently deletes the key metadata and all version data for the specified key. All version history will be removed."
      operationId = "delete-metadata-kv-secrets"
      tags {
        "secrets"
      }
      responses {
        ["204"] {
          description = "All metadata has been deleted"
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }
}

components {
  schemas {
    ["KVSecretConfigResponse"] = (VaultDataResponse) {
      properties {
        ["data"] = VaultRequestBody.kvSecretConfig
      }
    }

    ["WriteOrPatchKVSecretRequest"] = VaultRequestBody.kvSecret

    ["WriteSecretResponse"] = (VaultDataResponse) {
      properties {
        ["data"] = VaultRequestBody.kvMetadata
      }
    }

    ["ReadSecretResponse"] = (VaultDataResponse) {
      properties {
        ["data"] {
          properties {
            // Due to soft-delete this can be optional
            ["data"] {
              type = "object"
            }
            ["metadata"] = VaultRequestBody.kvMetadata
          }
        }
      }
    }
  }
}