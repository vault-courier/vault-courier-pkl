//===----------------------------------------------------------------------===//
//  Copyright (c) 2025 Javier Cuesta
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//===----------------------------------------------------------------------===//

module KeyValueEngine

amends "@openapi/Document.pkl"
import "@openapi/PathItem.pkl"
import "@openapi/Reference.pkl"
import "@openapi/Schema.pkl"

import ".../VaultDataResponse.pkl"
import ".../VaultRequestBody.pkl"

/// Parameter name in the crud endpoint
local parameterKVPathName = "kv_path"
local secretKeyParameter = "secret_key"

paths {
  ["/{\(parameterKVPathName)}/config"] {
    parameters {
      new {
        name = parameterKVPathName
        description = "Key-value engine path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
    }
    description = "This path configures backend level settings that are applied to every key in the key-value store"
    get {
      summary = "This path retrieves the current configuration for the secrets backend at the given path."
      description = "This path retrieves the current configuration for the secrets backend at the given path."
      operationId = "read-kv-secrets-config"
      tags {
        "secrets"
        "kv"
      }
      responses {
        ["200"] {
          description = "Ok"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/KVSecretConfigResponse"
              }
            }
          }
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
    post {
      summary = "This path configures backend level settings that are applied to every key in the key-value store."
      description = "This path configures backend level settings that are applied to every key in the key-value store."
      operationId = "config-kv-secrets"
      tags {
        "secrets"
        "kv"
      }
      requestBody {
        required = true
        content {
          ["application/json"] {
            schema = VaultRequestBody.kvSecretConfig
          }
        }
      }
      responses {
        ["204"] {
          description = "NoContent"
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }

  ["/{\(parameterKVPathName)}/data/{\(secretKeyParameter)}"] {
    description = "Server secrets endpoint"
    parameters {
      new {
        name = "version"
        `in` = "query"
        description = "Specifies the version to return. If not set the latest version is returned."
        required = false
        schema {
          type = "integer"
          minimum = 0
        }
      }
      new {
        name = parameterKVPathName
        description = "Key-value engine path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new {
        name = secretKeyParameter
        description = "The key path for a stored secret in this path"
        `in`= "path"
        schema {
          type = "string"
        }
        required = true
      }
      new Reference {
        `$ref` = "#/components/parameters/VaultTokenHeader"
      }
    }
    post {
      summary = "Writes a kv secret"
      description = "Writes a kv secret"
      operationId = "write-kv-secrets"
      tags {
        "secrets"
      }
      requestBody {
        required = true
        content {
          ["application/json"] {
            schema = new Reference {
              `$ref` = "#/components/schemas/WriteOrPatchKVSecretRequest"
            }
          }
        }
      }
      responses {
        ["200"] {
          description = "OK"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/WriteSecretResponse"
              }
            }
          }
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
    get {
      summary = "Reads an existing secret"
      description = "Reads an existing secret"
      operationId = "read-kv-secrets"
      tags {
        "secrets"
      }
      responses {
        ["200"] {
          description = "OK"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/ReadSecretResponse"
              }
            }
          }
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
    patch {
      summary = "Patch a kv secret"
      description = "This endpoint provides the ability to patch an existing secret at the specified location. The secret must neither be deleted nor destroyed. The calling token must have an ACL policy granting the patch capability. A new version will be created upon successfully applying a patch with the provided data."
      operationId = "patch-kv-secrets"
      tags {
        "secrets"
      }
      requestBody {
        required = true
        content {
          ["application/merge-patch+json"] {
            schema = new Reference {
              `$ref` = "#/components/schemas/WriteOrPatchKVSecretRequest"
            }
          }
        }
      }
      responses {
        ["200"] {
          description = "OK"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/WriteSecretResponse"
              }
            }
          }
        }
        ["400"] {
          description = "BadRequest"
          content {
            ["application/json"] {
              schema = new Reference {
                `$ref` = "#/components/schemas/VaultErrorsResponse"
              }
            }
          }
        }
      }
    }
  }  
}

components {
  schemas {
    ["KVSecretConfigResponse"] = (VaultDataResponse) {
      properties {
        ["data"] = VaultRequestBody.kvSecretConfig
      }
    }

    ["WriteOrPatchKVSecretRequest"] = VaultRequestBody.kvSecret

    ["WriteSecretResponse"] = (VaultDataResponse) {
      properties {
        ["data"] = VaultRequestBody.kvMetadata
      }
    }

    ["ReadSecretResponse"] = (VaultDataResponse) {
      properties {
        ["data"] {
          properties {
            ["data"] {
              type = "object"
            }
          }
          required {
            "data"
          }
        }
        ["metadata"] = VaultRequestBody.kvMetadata
      }
    }
  }
}