//===----------------------------------------------------------------------===//
//  Copyright (c) 2025 Javier Cuesta
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//===----------------------------------------------------------------------===//

/// Postgres Static Role
///
/// [Vault Static Role documentation](https://developer.hashicorp.com/vault/api-docs/secret/databases#create-static-role)
module PostgresStaticRole

/// The corresponding role in the database of `db_username`
vault_role_name: String

/// Specifies the database username that this Vault role corresponds to. See `vault_role_name`
db_username: String

/// The name of the database connection to use for this role.
db_connection_name: String

class RotationSchedule {
  schedule: String
  window: String?
}

class RotationPeriod {
  period: String
}

hidden rotation: RotationPeriod|RotationSchedule

/// Specifies the amount of time Vault should wait before rotating the password. The minimum is 5 seconds.
/// Uses duration format strings. Mutually exclusive with `rotation_schedule`.
rotation_period: String? = 
  if (rotation is RotationPeriod) rotation.period else null

/// A cron-style string that will define the schedule on which rotations should occur. This should be
/// a "standard" cron-style string made of five fields of which each entry defines the minute, hour,
/// day of month, month, and day of week respectively. For example, a value of '0 0 * * SAT' will set
/// rotations to occur on Saturday at 00:00. Mutually exclusive with `rotation_period`."
rotation_schedule: String? = 
  if (rotation is RotationSchedule) rotation.schedule else null

/// Specifies the amount of time in which the rotation is allowed to occur starting from a given `rotation_schedule`.
/// If the credential is not rotated during this window, due to a failure or otherwise, it will not be rotated until
/// the next scheduled rotation. The minimum is 1 hour. Uses duration format strings. Optional when `rotation_schedule`
/// is set and disallowed when `rotation_period` is set.
rotation_window: String? = 
  if (rotation is RotationSchedule) rotation.window else null

/// Specifies the database statements to be executed to rotate the password for the configured database user.
/// Not every plugin type will support this functionality. See the plugin's API page for more information on
/// support and formatting for this parameter.
rotation_statements: Listing<String>?

class PasswordCredential {
  passwordPolicy: String?

  hidden type: String = "password"
}

class RSAPrivateKey {
  key_bits: Int?
  format: String?

  hidden type: String = "rsa_private_key"
}

class ClientCertificate {
  /// A username template to be used for the client certificate common name.
  common_name_template: String?

  /// The PEM-encoded CA certificate.
  ca_cert: String?
  
  /// The PEM-encoded private key for the given ca_cert.
  ca_private_key: String? 
  
  /// Specifies the desired key type. Options include: rsa, ed25519, ec.
  key_type: String

  /// Number of bits to use for the generated keys. Options include: 2048 (default),
  /// 3072, 4096; with `key_type=ec`, allowed values are: 224, 256 (default), 384, 521; ignored with `key_type=ed25519`.
  key_bits: Int?

  /// The number of bits to use in the signature algorithm. Options include: 256 (default), 384, 512.
  signature_bits: Int?

  hidden type: String = "client_certificate"
}

hidden credential: PasswordCredential|RSAPrivateKey|ClientCertificate

typealias CredentialType = "password"|"rsa_private_key"|"client_certificate"

/// Specifies the type of credential that will be generated for the role. Options include: `password`,
/// `rsa_private_key`, `client_certificate`. See the plugin's API page for credential types supported 
/// by individual databases.
credential_type: CredentialType? = credential.type

/// Specifies the configuration for the given `credential_type`. See documentation for details
credential_config: Mapping<String, String>? = 
  let (config = credential
                  .toMap()
                  .filter((_, elem) -> elem != null)
                  .mapValues((_, elem) -> elem.toString())
                  .toMapping())
  if (config.isEmpty) null else config