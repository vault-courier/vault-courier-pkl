//===----------------------------------------------------------------------===//
//  Copyright (c) 2025 Javier Cuesta
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//===----------------------------------------------------------------------===//

/// Configuration for creating a Vault AppRole
/// https://developer.hashicorp.com/vault/api-docs/auth/approle#create-update-approle
module VaultAppRole

/// Custom approle auth path. This value was given in AuthMethodConfig
approle_path: String?

///  Name of the AppRole. Must be less than 4096 bytes, accepted characters include a-Z, 0-9, space, hyphen, underscore and periods.
role_name: String

/// Require `secret_id` to be presented when logging in using this AppRole.
bind_secret_id: Boolean? 

/// Comma-separated string or list of CIDR blocks; if set, specifies blocks of IP addresses which can perform the login operation.
secret_id_bound_cidrs: Listing<String>?

/// Number of times any particular SecretID can be used to fetch a token from this AppRole, after which the SecretID by default will expire. A value of zero will allow unlimited uses. However, this option may be overridden by the request's `num_uses` field when generating a SecretID.
secret_id_num_uses: Int?

/// Duration in either an integer number of seconds (3600) or an integer time unit (60m) after which by default any SecretID expires. A value of zero will allow the SecretID to not expire. However, this option may be overridden by the request's `ttl` field when generating a SecretID.
secret_id_ttl: Duration?

/// If set, the secret IDs generated using this role will be cluster local. This can only be set during role creation and once set, it can't be reset later.
local_secret_ids: Boolean?

/// The incremental lifetime for generated tokens. This current value of this will be referenced at renewal time.
token_ttl: Duration?

/// The maximum lifetime for generated tokens. This current value of this will be referenced at renewal time.
token_max_ttl: Duration?

/// List of token policies to encode onto generated tokens. Depending on the auth method, this list may be supplemented by user/group/other values.
token_policies: Listing<String>

/// List of CIDR blocks; if set, specifies blocks of IP addresses which can authenticate successfully, and ties the resulting token to these blocks as well.
token_bound_cidrs: Listing<String>?

/// If set, will encode an explicit max TTL onto the token. This is a hard cap even if `token_ttl` and `token_max_ttl` would otherwise allow a renewal.
token_explicit_max_ttl: String?

/// If set, the default policy will not be set on generated tokens; otherwise it will be added to the policies set in `token_policies`.
token_no_default_policy: Boolean?

/// The maximum number of times a generated token may be used (within its lifetime); 0 means unlimited. If you require the token to have the ability to create child tokens, you will need to set this value to 0.
token_num_uses: Int?

/// The maximum allowed period value when a periodic token is requested from this role.
token_period: Duration?

typealias TokenType = "batch"|"service"|"default"

/// The type of token that should be generated. Can be service, batch, or default to use the mount's tuned default (which unless changed will be service tokens). For token store roles, there are two additional possibilities: `default-service` and `default-batch` which specify the type to return unless the client requests a different type at generation time. For machine based authentication cases, you should use batch type tokens.
token_type: TokenType