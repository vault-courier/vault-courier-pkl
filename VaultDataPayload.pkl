//===----------------------------------------------------------------------===//
//  Copyright (c) 2025 Javier Cuesta
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//===----------------------------------------------------------------------===//
module VaultDataPayload

import "@openapi/Schema.pkl"

createToken = (Schema.PropertySchema) {
  type = "object"
  properties {
    ["display_name"] {
      type =  "string"
      description = "Name to associate with this token"
    }
    ["entity_alias"] {
      type = "string"
      description = "Name of the entity alias to associate with this token"
    }
    ["explicit_max_ttl"] {
      type = "string"
      description = "Explicit Max TTL of this token"
    }
    ["id"] {
      type = "string"
      description = "Value for the token"
    }
    ["meta"] {
      type = "object"
      description = "Arbitrary key=value metadata to associate with the token"
      format = "kvpairs"
    }
    ["no_default_policy"] {
      type = "boolean"
      description = "Do not include default policy for this token"
    }
    ["no_parent"] {
      type = "boolean"
      description = "Create the token with no parent"
    }
    ["num_uses"] {
      type = "integer"
      description = "Max number of uses for this token"
    }
    ["period"] {
      type = "string"
      description = "Renew period"
    }
    ["policies"] {
      type = "array"
      description = "A list of policies for the token. This must be a subset of the policies belonging to the token making the request, unless the calling token is root or contains sudo capabilities to auth/token/create. If not specified, defaults to all the policies of the calling token."
      items = new Schema {
        type = "string"
      }
    }
    ["renewable"] {
      type = "boolean"
      description = "Allow token to be renewed past its initial TTL up to system/mount maximum TTL"
      default = true
    }
    ["ttl"] {
      type = "string"
      description = "Time to live for this token"
    }
    ["type"] {
      type = "string"
      description = "Token type"
      enum {
        "batch"
        "service"
        "default"
        "default-service"
        "default-batch"
      }
    }
  }
}

tokenLookup = (Schema.PropertySchema) {
  type = "object"
  properties {
    ["accessor"] {
      type =  "string"
    }
    ["creation_time"] {
      type = "integer"
    }
    ["creation_ttl"] {
      type = "integer"
    }
    ["display_name"] {
      type =  "string"
      description = "Name to associate with this token"
    }
    ["entity_id"] {
      type = "string"
      description = "Name of the entity id to associate with this token"
    }
    ["expire_time"] {
      type = "string"
      description = "Optional expire time date in string format."
    }
    ["explicit_max_ttl"] {
      type = "integer"
    }
    ["id"] {
      type = "string"
      description = "Value for the token"
    }
    ["issue_time"] {
      type = "string"
      description = "Value for the token"
    }
    ["meta"] {
      type = "object"
      description = "Arbitrary key=value metadata to associate with the token"
      format = "kvpairs"
      additionalProperties {
        type = "string"
      }
    }
    ["num_uses"] {
      type = "integer"
      description = "Max number of uses for this token"
    }
    ["orphan"] {
      type = "boolean"
    }
    ["path"] {
      type = "string"
    }
    ["policies"] {
      type = "array"
      description = "A list of policies for the token."
      items = new Schema {
        type = "string"
      }
    }
    ["renewable"] {
      type = "boolean"
      description = "Allow token to be renewed past its initial TTL up to system/mount maximum TTL"
    }
    ["ttl"] {
      type = "integer"
      description = "Time to live for this token"
    }
    ["type"] {
      type = "string"
      description = "Token type"
      enum {
        "batch"
        "service"
        "default"
        "default-service"
        "default-batch"
      }
    }
  }
  required {
    "accessor"
    "creation_time"
    "creation_ttl"
    "display_name"
    "entity_id"
    "id"
    "issue_time"
    "num_uses"
    "orphan"
    "path"
    "policies"
    "renewable"
    "ttl"
    "type"
  }
}

createTokenRole = (Schema.PropertySchema) {
  type = "object"
  properties {
    ["allowed_policies"] {
      type = "array"
      description = #"If set, tokens can be created with any subset of the policies in this list, rather than the normal semantics of tokens being a subset of the calling token's policies. The parameter is a comma-delimited string of policy names. If at creation time no_default_policy is not set and "default" is not contained in disallowed_policies or glob matched in disallowed_policies_glob, the "default" policy will be added to the created token automatically."#
      items = new Schema {
        type = "string"
      }
    }
    ["disallowed_policies"] {
      type = "array"
      description = #"If set, successful token creation via this role will require that no policies in the given list are requested. The parameter is a comma-delimited string of policy names. Adding "default" to this list will prevent "default" from being added automatically to created tokens."#
      items = new Schema {
        type = "string"
      }
    }
    ["allowed_policies_glob"] {
      type = "array"
      description = #"If set, tokens can be created with any subset of glob matched policies in this list, rather than the normal semantics of tokens being a subset of the calling token's policies. The parameter is a comma-delimited string of policy name globs. If at creation time no_default_policy is not set and "default" is not contained in disallowed_policies or glob matched in disallowed_policies_glob, the "default" policy will be added to the created token automatically. If combined with allowed_policies policies need to only match one of the two lists to be permitted. Note that unlike allowed_policies the policies listed in allowed_policies_glob will not be added to the token when no policies are specified in the call to /auth/token/create/:role_name."#
      items = new Schema {
        type = "string"
      }
    }
    ["disallowed_policies_glob"] {
      type = "array"
      description = #"If set, successful token creation via this role will require that no requested policies glob match any of policies in this list. The parameter is a comma-delimited string of policy name globs. Adding any glob that matches "default" to this list will prevent "default" from being added automatically to created tokens. If combined with disallowed_policies policies need to only match one of the two lists to be blocked."#
      items = new Schema {
        type = "string"
      }
    }
    ["orphan"] {
      type = "boolean"
      description = "If true, tokens created against this policy will be orphan tokens (they will have no parent). As such, they will not be automatically revoked by the revocation of any other token."
    }
    ["renewable"] {
      type = "boolean"
      description = "Set to false to disable the ability of the token to be renewed past its initial TTL. Setting the value to true will allow the token to be renewable up to the system/mount maximum TTL."
    }
    ["path_suffix"] {
      type = "string"
      description = #" If set, tokens created against this role will have the given suffix as part of their path in addition to the role name. This can be useful in certain scenarios, such as keeping the same role name in the future but revoking all tokens created against it before some point in time. The suffix can be changed, allowing new callers to have the new suffix as part of their path, and then tokens with the old suffix can be revoked via /sys/leases/revoke-prefix."#
    }
    ["allowed_entity_aliases"] {
      type = "array"
      description = #"String or JSON list of allowed entity aliases. If set, specifies the entity aliases which are allowed to be used during token generation. This field supports globbing. Note that allowed_entity_aliases is not case sensitive."#
      items = new Schema {
        type = "string"
      }
    }
    ["token_bound_cidrs"] {
      type = "array"
      description = "List of CIDR blocks; if set, specifies blocks of IP addresses which can authenticate successfully, and ties the resulting token to these blocks as well."
      items = new Schema {
        type = "string"
      }
    }
    ["token_explicit_max_ttl"] {
      type = "string"
      description = "If set, will encode an explicit max TTL onto the token. This is a hard cap even if token_ttl and token_max_ttl would otherwise allow a renewal."
    }
    ["token_no_default_policy"] {
      type = "boolean"
      description = "If set, the default policy will not be set on generated tokens; otherwise it will be added to the policies set in token_policies."
    }
    ["token_num_uses"] {
      type = "integer"
      description = "The maximum number of times a generated token may be used (within its lifetime); 0 means unlimited. If you require the token to have the ability to create child tokens, you will need to set this value to 0."
    }
    ["token_period"] {
      type = "string"
      description = "The maximum allowed period value when a periodic token is requested from this role."
    }
    ["token_type"] {
      type = "string"
      description = #"The type of token that should be generated. Can be service, batch, or default to use the mount's tuned default (which unless changed will be service tokens). For token store roles, there are two additional possibilities: default-service and default-batch which specify the type to return unless the client requests a different type at generation time. For machine based authentication cases, you should use batch type tokens."#
      enum {
        "batch"
        "service"
        "default"
        "default-service"
        "default-batch"
      }
    }
  }
}

/// Response body when reading token role
tokenRole = (createTokenRole) {
  properties = (createTokenRole.properties) {
    ["name"] {
      type = "string"
      description = "The name of the token role."
    }
    ["token_explicit_max_ttl"] {
      type = "integer"
      description = "If set, will encode an explicit max TTL onto the token. This is a hard cap even if token_ttl and token_max_ttl would otherwise allow a renewal."
    }
    ["token_period"] {
      type = "integer"
      description = "The maximum allowed period value when a periodic token is requested from this role."
    }
  }
  required {
    "name"
  }
}

tokenCommon = (Schema.PropertySchema) {
  type = "object"
  properties {
    ["token_bound_cidrs"] {
      type = "array"
      description = "List of CIDR blocks; if set, specifies blocks of IP addresses which can authenticate successfully, and ties the resulting token to these blocks as well."
      items = new Schema {
        type = "string"
      }
    }
    ["token_explicit_max_ttl"] {
      type = "string"
      description = "If set, will encode an explicit max TTL onto the token. This is a hard cap even if `token_ttl` and `token_max_ttl` would otherwise allow a renewal."
    }
    ["token_no_default_policy"] {
      type = "boolean"
      description = "If set, the default policy will not be set on generated tokens; otherwise it will be added to the policies set in `token_policies`."
    }
    ["token_num_uses"] {
      type = "integer"
      description = "The maximum number of times a generated token may be used (within its lifetime); 0 means unlimited. If you require the token to have the ability to create child tokens, you will need to set this value to 0."
    }
    ["token_period"] {
      type = "string"
      description = "The maximum allowed period value when a periodic token is requested from this role."
    }
    ["token_type"] {
      type = "string"
      description = #"The type of token that should be generated. Can be service, batch, or default to use the mount's tuned default (which unless changed will be service tokens). For token store roles, there are two additional possibilities: default-service and default-batch which specify the type to return unless the client requests a different type at generation time. For machine based authentication cases, you should use batch type tokens."#
      enum {
        "batch"
        "service"
        "default"
        "default-service"
        "default-batch"
      }
    }
  }
}

createAppRole = (tokenCommon) {
  properties {
    ["token_ttl"] {
      type = "string"
      description = "The incremental lifetime for generated tokens. This current value of this will be referenced at renewal time."
    }
    ["token_max_ttl"] {
      type = "string"
      description = "The maximum lifetime for generated tokens. This current value of this will be referenced at renewal time."
    }
    ["token_policies"] {
      type = "array"
      description = "List of token policies to encode onto generated tokens. Depending on the auth method, this list may be supplemented by user/group/other values."
      items = new Schema {
        type = "string"
      }
    }

    ["bind_secret_id"] {
      type = "boolean"
      description = "Require `secret_id` to be presented when logging in using this AppRole."
    }
    ["secret_id_bound_cidrs"] {
      type = "array"
      description = "Comma-separated string or list of CIDR blocks; if set, specifies blocks of IP addresses which can perform the login operation."
      items = new Schema {
        type = "string"
      }
    }
    ["secret_id_num_uses"] {
      type = "integer"
      description = "Number of times any particular SecretID can be used to fetch a token from this AppRole, after which the SecretID by default will expire. A value of zero will allow unlimited uses. However, this option may be overridden by the request's `num_uses` field when generating a SecretID."
    }
    ["secret_id_ttl"] {
      type = "string"
      description = "Duration in either an integer number of seconds (3600) or an integer time unit (60m) after which by default any SecretID expires. A value of zero will allow the SecretID to not expire. However, this option may be overridden by the request's `ttl` field when generating a SecretID."
    }
    ["local_secret_ids"] {
      type = "boolean"
      description = "If set, the secret IDs generated using this role will be cluster local. This can only be set during role creation and once set, it can't be reset later."
    }
  }
}